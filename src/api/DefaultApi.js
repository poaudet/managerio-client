/**
 * Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.11.6.1925
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ManagerIoClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 24.11.6.1925
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ManagerIoClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ManagerIoClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAccessTokenForm operation.
     * @callback module:api/DefaultApi~deleteAccessTokenFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteAccessTokenFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccessTokenForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAccessTokenForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/access-token-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAgedPayablesForm operation.
     * @callback module:api/DefaultApi~deleteAgedPayablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteAgedPayablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAgedPayablesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAgedPayablesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-payables-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAgedReceivablesForm operation.
     * @callback module:api/DefaultApi~deleteAgedReceivablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteAgedReceivablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAgedReceivablesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAgedReceivablesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-receivables-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAmortizationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~deleteAmortizationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteAmortizationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAmortizationCalculationWorksheetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAmortizationCalculationWorksheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-calculation-worksheet-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAmortizationEntryForm operation.
     * @callback module:api/DefaultApi~deleteAmortizationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteAmortizationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAmortizationEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAmortizationEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-entry-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAttachmentForm operation.
     * @callback module:api/DefaultApi~deleteAttachmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteAttachmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAttachmentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAttachmentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attachment-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetAccountsPayableAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetAccountsPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetAccountsPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetAccountsPayableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetAccountsPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-payable-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetAccountsReceivableAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetAccountsReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetAccountsReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetAccountsReceivableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetAccountsReceivableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-receivable-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetBillableExpensesAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetBillableExpensesAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetBillableExpensesAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetBillableExpensesAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetBillableExpensesAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-expenses-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetBillableTimeAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetBillableTimeAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetBillableTimeAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetBillableTimeAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetBillableTimeAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-time-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetCapitalAccountsAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetCapitalAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetCapitalAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetCapitalAccountsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetCapitalAccountsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-capital-accounts-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetCashAtBankAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetCashAtBankAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetCashAtBankAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetCashAtBankAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetCashAtBankAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-cash-at-bank-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetEmployeeClearingAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetEmployeeClearingAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetEmployeeClearingAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetEmployeeClearingAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetEmployeeClearingAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-employee-clearing-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetEquityGroupNameForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetEquityGroupNameFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetEquityGroupNameFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetEquityGroupNameForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetEquityGroupNameForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-equity-group-name-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetExpenseClaimsAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetExpenseClaimsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetExpenseClaimsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetExpenseClaimsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetExpenseClaimsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-expense-claims-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-accumulated-depreciation-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetFixedAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetFixedAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetFixedAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetFixedAssetsAtCostAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetFixedAssetsAtCostAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-at-cost-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetGroupForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-group-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-accumulated-amortization-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetIntangibleAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetIntangibleAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetIntangibleAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetIntangibleAssetsAtCostAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetIntangibleAssetsAtCostAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-at-cost-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetInterAccountTransfersForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetInterAccountTransfersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetInterAccountTransfersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetInterAccountTransfersForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetInterAccountTransfersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inter-account-transfers-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetInventoryOnHandAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetInventoryOnHandAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetInventoryOnHandAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetInventoryOnHandAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetInventoryOnHandAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inventory-on-hand-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetInvestmentsAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetInvestmentsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetInvestmentsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetInvestmentsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetInvestmentsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-investments-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetProductionInProgressAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetProductionInProgressAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetProductionInProgressAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetProductionInProgressAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetProductionInProgressAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-production-in-progress-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetRetainedEarningsAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetRetainedEarningsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetRetainedEarningsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetRetainedEarningsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetRetainedEarningsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-retained-earnings-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetSpecialAccountsAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetSpecialAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetSpecialAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetSpecialAccountsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetSpecialAccountsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-special-accounts-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetSuspenseAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetSuspenseAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetSuspenseAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetSuspenseAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetSuspenseAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-suspense-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetTaxPayableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetTaxPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-tax-payable-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetWithholdingTaxAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetWithholdingTaxAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetWithholdingTaxAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetWithholdingTaxAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetWithholdingTaxAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetWithholdingTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetWithholdingTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetWithholdingTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetWithholdingTaxPayableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetWithholdingTaxPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-payable-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBalanceSheetWithholdingTaxReceivableAccountForm operation.
     * @callback module:api/DefaultApi~deleteBalanceSheetWithholdingTaxReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBalanceSheetWithholdingTaxReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBalanceSheetWithholdingTaxReceivableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBalanceSheetWithholdingTaxReceivableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-receivable-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankAccountSummaryForm operation.
     * @callback module:api/DefaultApi~deleteBankAccountSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBankAccountSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankAccountSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBankAccountSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-account-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankFeedProviderForm operation.
     * @callback module:api/DefaultApi~deleteBankFeedProviderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBankFeedProviderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankFeedProviderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBankFeedProviderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-feed-provider-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankOrCashAccountForm operation.
     * @callback module:api/DefaultApi~deleteBankOrCashAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBankOrCashAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankOrCashAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBankOrCashAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankOrCashAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteBankOrCashAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBankOrCashAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankOrCashAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBankOrCashAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankReconciliationForm operation.
     * @callback module:api/DefaultApi~deleteBankReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBankReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankReconciliationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBankReconciliationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-reconciliation-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBaseCurrencyForm operation.
     * @callback module:api/DefaultApi~deleteBaseCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBaseCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBaseCurrencyForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBaseCurrencyForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/base-currency-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBillableExpensesForm operation.
     * @callback module:api/DefaultApi~deleteBillableExpensesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBillableExpensesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBillableExpensesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBillableExpensesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-expenses-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBillableTimeEntryForm operation.
     * @callback module:api/DefaultApi~deleteBillableTimeEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBillableTimeEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBillableTimeEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBillableTimeEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-entry-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBillableTimeSummaryForm operation.
     * @callback module:api/DefaultApi~deleteBillableTimeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBillableTimeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBillableTimeSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBillableTimeSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBusinessDetailsForm operation.
     * @callback module:api/DefaultApi~deleteBusinessDetailsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteBusinessDetailsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBusinessDetailsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBusinessDetailsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/business-details-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCapitalAccountForm operation.
     * @callback module:api/DefaultApi~deleteCapitalAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCapitalAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCapitalAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCapitalAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCapitalAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteCapitalAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCapitalAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCapitalAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCapitalAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCapitalAccountsSummaryForm operation.
     * @callback module:api/DefaultApi~deleteCapitalAccountsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCapitalAccountsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCapitalAccountsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCapitalAccountsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-accounts-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCapitalSubaccountForm operation.
     * @callback module:api/DefaultApi~deleteCapitalSubaccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCapitalSubaccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCapitalSubaccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCapitalSubaccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-subaccount-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCashFlowStatementFinancingActivityGroupForm operation.
     * @callback module:api/DefaultApi~deleteCashFlowStatementFinancingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCashFlowStatementFinancingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCashFlowStatementFinancingActivityGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCashFlowStatementFinancingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-financing-activity-group-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCashFlowStatementForm operation.
     * @callback module:api/DefaultApi~deleteCashFlowStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCashFlowStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCashFlowStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCashFlowStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCashFlowStatementInvestingActivityGroupForm operation.
     * @callback module:api/DefaultApi~deleteCashFlowStatementInvestingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCashFlowStatementInvestingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCashFlowStatementInvestingActivityGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCashFlowStatementInvestingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-investing-activity-group-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCashFlowStatementOperatingActivityGroupForm operation.
     * @callback module:api/DefaultApi~deleteCashFlowStatementOperatingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCashFlowStatementOperatingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCashFlowStatementOperatingActivityGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCashFlowStatementOperatingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-operating-activity-group-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCheckboxCustomFieldForm operation.
     * @callback module:api/DefaultApi~deleteCheckboxCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCheckboxCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCheckboxCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCheckboxCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checkbox-custom-field-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClassicCustomFieldForm operation.
     * @callback module:api/DefaultApi~deleteClassicCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteClassicCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteClassicCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteClassicCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/classic-custom-field-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForBankAccountsForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForBankAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForBankAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForBankAccountsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForBankAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-bank-accounts-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForCapitalAccountsForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForCapitalAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForCapitalAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForCapitalAccountsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForCapitalAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-capital-accounts-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForCustomersForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForCustomersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForCustomersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForCustomersForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForCustomersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-customers-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForEmployeesForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForEmployeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForEmployeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForEmployeesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForEmployeesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-employees-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForFixedAssetsAccumulatedDepreciationForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForFixedAssetsAccumulatedDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForFixedAssetsAccumulatedDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForFixedAssetsAccumulatedDepreciationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForFixedAssetsAccumulatedDepreciationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-accumulated-depreciation-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForFixedAssetsForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForFixedAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForFixedAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForFixedAssetsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForFixedAssetsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForIntangibleAssetsAccumulatedAmortizationForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForIntangibleAssetsAccumulatedAmortizationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForIntangibleAssetsAccumulatedAmortizationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-accumulated-amortization-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForIntangibleAssetsForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForIntangibleAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForIntangibleAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForIntangibleAssetsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForIntangibleAssetsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForInventoryItemsForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForInventoryItemsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForInventoryItemsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForInventoryItemsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForInventoryItemsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-inventory-items-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForInvestmentsForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForInvestmentsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForInvestmentsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-investments-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForSpecialAccountsForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForSpecialAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForSpecialAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForSpecialAccountsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForSpecialAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-special-accounts-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlAccountForSuppliersForm operation.
     * @callback module:api/DefaultApi~deleteControlAccountForSuppliersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteControlAccountForSuppliersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteControlAccountForSuppliersForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteControlAccountForSuppliersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-suppliers-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCreditNoteFooterForm operation.
     * @callback module:api/DefaultApi~deleteCreditNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCreditNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCreditNoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCreditNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCreditNoteForm operation.
     * @callback module:api/DefaultApi~deleteCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCreditNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCreditNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomReportForm operation.
     * @callback module:api/DefaultApi~deleteCustomReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCustomReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomReportForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCustomReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom-report-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerForm operation.
     * @callback module:api/DefaultApi~deleteCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerPortalForm operation.
     * @callback module:api/DefaultApi~deleteCustomerPortalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCustomerPortalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomerPortalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCustomerPortalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-portal-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~deleteCustomerStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCustomerStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomerStatementsTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCustomerStatementsTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-transactions-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~deleteCustomerStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCustomerStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomerStatementsUnpaidInvoicesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCustomerStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-unpaid-invoices-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerSummaryForm operation.
     * @callback module:api/DefaultApi~deleteCustomerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteCustomerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomerSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCustomerSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDateAndNumberFormatForm operation.
     * @callback module:api/DefaultApi~deleteDateAndNumberFormatFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDateAndNumberFormatFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDateAndNumberFormatForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDateAndNumberFormatForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-and-number-format-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDateCustomFieldForm operation.
     * @callback module:api/DefaultApi~deleteDateCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDateCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDateCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDateCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-custom-field-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDebitNoteFooterForm operation.
     * @callback module:api/DefaultApi~deleteDebitNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDebitNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDebitNoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDebitNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDebitNoteForm operation.
     * @callback module:api/DefaultApi~deleteDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDebitNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDebitNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeliveryNoteFooterForm operation.
     * @callback module:api/DefaultApi~deleteDeliveryNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDeliveryNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeliveryNoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDeliveryNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~deleteDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeliveryNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDeliveryNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDepreciationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~deleteDepreciationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDepreciationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDepreciationCalculationWorksheetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDepreciationCalculationWorksheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-calculation-worksheet-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDepreciationEntryForm operation.
     * @callback module:api/DefaultApi~deleteDepreciationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDepreciationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDepreciationEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDepreciationEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-entry-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDivisionExceptionReportForm operation.
     * @callback module:api/DefaultApi~deleteDivisionExceptionReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDivisionExceptionReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDivisionExceptionReportForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDivisionExceptionReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-exception-report-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDivisionForm operation.
     * @callback module:api/DefaultApi~deleteDivisionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteDivisionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDivisionForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDivisionForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailSettingsForm operation.
     * @callback module:api/DefaultApi~deleteEmailSettingsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailSettingsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailSettingsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailSettingsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-settings-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForCreditNoteForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForCreditNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForCreditNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-credit-note-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForCustomerStatementForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForCustomerStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForCustomerStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForCustomerStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForCustomerStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-customer-statement-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForDebitNoteForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForDebitNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForDebitNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-debit-note-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForDeliveryNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForDeliveryNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-delivery-note-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForPaymentForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForPaymentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payment-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForPayslipForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForPayslipForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payslip-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForPurchaseInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-invoice-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForPurchaseOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-order-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForPurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForPurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForPurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForPurchaseQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForPurchaseQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-quote-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForReceiptForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-receipt-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForSalesInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-invoice-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForSalesOrderForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForSalesOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-order-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplateForSalesQuoteForm operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateForSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmailTemplateForSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailTemplateForSalesQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmailTemplateForSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-quote-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmployeeForm operation.
     * @callback module:api/DefaultApi~deleteEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmployeeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmployeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmployeeStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteEmployeeStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmployeeStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmployeeStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmployeeStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmployeeSummaryForm operation.
     * @callback module:api/DefaultApi~deleteEmployeeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteEmployeeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmployeeSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteEmployeeSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExchangeRateForm operation.
     * @callback module:api/DefaultApi~deleteExchangeRateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteExchangeRateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExchangeRateForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteExchangeRateForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/exchange-rate-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExpenseClaimFooterForm operation.
     * @callback module:api/DefaultApi~deleteExpenseClaimFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteExpenseClaimFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExpenseClaimFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteExpenseClaimFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExpenseClaimForm operation.
     * @callback module:api/DefaultApi~deleteExpenseClaimFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteExpenseClaimFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExpenseClaimForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteExpenseClaimForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExpenseClaimPayerForm operation.
     * @callback module:api/DefaultApi~deleteExpenseClaimPayerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteExpenseClaimPayerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExpenseClaimPayerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteExpenseClaimPayerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-payer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExpenseClaimsSummaryForm operation.
     * @callback module:api/DefaultApi~deleteExpenseClaimsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteExpenseClaimsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExpenseClaimsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteExpenseClaimsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claims-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionForm operation.
     * @callback module:api/DefaultApi~deleteExtensionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteExtensionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExtensionForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteExtensionForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extension-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFixedAssetForm operation.
     * @callback module:api/DefaultApi~deleteFixedAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteFixedAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFixedAssetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteFixedAssetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFixedAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteFixedAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteFixedAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFixedAssetStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteFixedAssetStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFixedAssetSummaryForm operation.
     * @callback module:api/DefaultApi~deleteFixedAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteFixedAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFixedAssetSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteFixedAssetSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFolderForm operation.
     * @callback module:api/DefaultApi~deleteFolderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteFolderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFolderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteFolderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/folder-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteForecastForm operation.
     * @callback module:api/DefaultApi~deleteForecastFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteForecastFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteForecastForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteForecastForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteForecastProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~deleteForecastProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteForecastProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteForecastProfitAndLossStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteForecastProfitAndLossStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-profit-and-loss-statement-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteForeignCurrencyForm operation.
     * @callback module:api/DefaultApi~deleteForeignCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteForeignCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteForeignCurrencyForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteForeignCurrencyForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/foreign-currency-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGeneralLedgerSummaryForm operation.
     * @callback module:api/DefaultApi~deleteGeneralLedgerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteGeneralLedgerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGeneralLedgerSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteGeneralLedgerSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGeneralLedgerTransactionsForm operation.
     * @callback module:api/DefaultApi~deleteGeneralLedgerTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteGeneralLedgerTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGeneralLedgerTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteGeneralLedgerTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-transactions-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGoodsReceiptFooterForm operation.
     * @callback module:api/DefaultApi~deleteGoodsReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteGoodsReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGoodsReceiptFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteGoodsReceiptFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGoodsReceiptForm operation.
     * @callback module:api/DefaultApi~deleteGoodsReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteGoodsReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGoodsReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteGoodsReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntangibleAssetForm operation.
     * @callback module:api/DefaultApi~deleteIntangibleAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteIntangibleAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntangibleAssetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteIntangibleAssetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntangibleAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteIntangibleAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteIntangibleAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntangibleAssetStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteIntangibleAssetStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntangibleAssetSummaryForm operation.
     * @callback module:api/DefaultApi~deleteIntangibleAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteIntangibleAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntangibleAssetSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteIntangibleAssetSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInterAccountTransferFooterForm operation.
     * @callback module:api/DefaultApi~deleteInterAccountTransferFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInterAccountTransferFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInterAccountTransferFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInterAccountTransferFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~deleteInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInterAccountTransferForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInterAccountTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInternalPdfGeneratorForm operation.
     * @callback module:api/DefaultApi~deleteInternalPdfGeneratorFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInternalPdfGeneratorFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInternalPdfGeneratorForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInternalPdfGeneratorForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/internal-pdf-generator-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventmentForm operation.
     * @callback module:api/DefaultApi~deleteInventmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventmentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventmentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventment-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryAutomaticRevaluationForm operation.
     * @callback module:api/DefaultApi~deleteInventoryAutomaticRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryAutomaticRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryAutomaticRevaluationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryAutomaticRevaluationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-automatic-revaluation-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryItemForm operation.
     * @callback module:api/DefaultApi~deleteInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryItemStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteInventoryItemStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryItemStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryItemStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryItemStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryKitForm operation.
     * @callback module:api/DefaultApi~deleteInventoryKitFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryKitFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryKitForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryKitForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-kit-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryLocationForm operation.
     * @callback module:api/DefaultApi~deleteInventoryLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryLocationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryLocationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-location-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryPriceListForm operation.
     * @callback module:api/DefaultApi~deleteInventoryPriceListFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryPriceListFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryPriceListForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryPriceListForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-price-list-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryProfitMarginForm operation.
     * @callback module:api/DefaultApi~deleteInventoryProfitMarginFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryProfitMarginFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryProfitMarginForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryProfitMarginForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-profit-margin-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryQuantityByLocationForm operation.
     * @callback module:api/DefaultApi~deleteInventoryQuantityByLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryQuantityByLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryQuantityByLocationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryQuantityByLocationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-by-location-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryQuantitySummaryForm operation.
     * @callback module:api/DefaultApi~deleteInventoryQuantitySummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryQuantitySummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryQuantitySummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryQuantitySummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryRevaluationForm operation.
     * @callback module:api/DefaultApi~deleteInventoryRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryRevaluationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryRevaluationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-revaluation-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryTransferForm operation.
     * @callback module:api/DefaultApi~deleteInventoryTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryTransferForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-transfer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryValueSummaryForm operation.
     * @callback module:api/DefaultApi~deleteInventoryValueSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryValueSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryValueSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryValueSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-value-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryWriteOffForm operation.
     * @callback module:api/DefaultApi~deleteInventoryWriteOffFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInventoryWriteOffFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInventoryWriteOffForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInventoryWriteOffForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-write-off-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvestmentMarketPriceForm operation.
     * @callback module:api/DefaultApi~deleteInvestmentMarketPriceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInvestmentMarketPriceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvestmentMarketPriceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInvestmentMarketPriceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-market-price-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvestmentStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteInvestmentStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteInvestmentStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvestmentStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteInvestmentStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJournalEntryFooterForm operation.
     * @callback module:api/DefaultApi~deleteJournalEntryFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteJournalEntryFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJournalEntryFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteJournalEntryFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJournalEntryForm operation.
     * @callback module:api/DefaultApi~deleteJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJournalEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteJournalEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLatePaymentFeeForm operation.
     * @callback module:api/DefaultApi~deleteLatePaymentFeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteLatePaymentFeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLatePaymentFeeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteLatePaymentFeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/late-payment-fee-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLockDateForm operation.
     * @callback module:api/DefaultApi~deleteLockDateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteLockDateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLockDateForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteLockDateForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lock-date-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMultipleValueCustomFieldForm operation.
     * @callback module:api/DefaultApi~deleteMultipleValueCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteMultipleValueCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMultipleValueCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMultipleValueCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/multiple-value-custom-field-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNonInventoryItemForm operation.
     * @callback module:api/DefaultApi~deleteNonInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteNonInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNonInventoryItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteNonInventoryItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/non-inventory-item-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNumberCustomFieldForm operation.
     * @callback module:api/DefaultApi~deleteNumberCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteNumberCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNumberCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteNumberCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/number-custom-field-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePaymentFooterForm operation.
     * @callback module:api/DefaultApi~deletePaymentFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePaymentFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePaymentFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePaymentFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePaymentForm operation.
     * @callback module:api/DefaultApi~deletePaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePaymentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePaymentRuleForm operation.
     * @callback module:api/DefaultApi~deletePaymentRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePaymentRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePaymentRuleForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePaymentRuleForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-rule-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipContributionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~deletePayslipContributionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipContributionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipContributionItemReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipContributionItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-contribution-item-reporting-category-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipDeductionItemForm operation.
     * @callback module:api/DefaultApi~deletePayslipDeductionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipDeductionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipDeductionItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipDeductionItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipDeductionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~deletePayslipDeductionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipDeductionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipDeductionItemReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipDeductionItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-reporting-category-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipEarningsItemForm operation.
     * @callback module:api/DefaultApi~deletePayslipEarningsItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipEarningsItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipEarningsItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipEarningsItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipEarningsItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~deletePayslipEarningsItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipEarningsItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipEarningsItemReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipEarningsItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-reporting-category-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipEmployerContributionItemForm operation.
     * @callback module:api/DefaultApi~deletePayslipEmployerContributionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipEmployerContributionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipEmployerContributionItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipEmployerContributionItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-employer-contribution-item-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipFooterForm operation.
     * @callback module:api/DefaultApi~deletePayslipFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipForm operation.
     * @callback module:api/DefaultApi~deletePayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipSummaryForm operation.
     * @callback module:api/DefaultApi~deletePayslipSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayslipTotalsPerItemAndEmployeeForm operation.
     * @callback module:api/DefaultApi~deletePayslipTotalsPerItemAndEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePayslipTotalsPerItemAndEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayslipTotalsPerItemAndEmployeeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePayslipTotalsPerItemAndEmployeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-totals-per-item-and-employee-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductionOrderForm operation.
     * @callback module:api/DefaultApi~deleteProductionOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProductionOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProductionOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProductionOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/production-order-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountBillableExpensesCostForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableExpensesCostFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableExpensesCostFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountBillableExpensesCostForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountBillableExpensesCostForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-cost-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountBillableExpensesInvoicedForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountBillableExpensesInvoicedForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountBillableExpensesInvoicedForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-invoiced-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountBillableTimeInvoicedForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableTimeInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableTimeInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountBillableTimeInvoicedForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountBillableTimeInvoicedForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-invoiced-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountBillableTimeMovementForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableTimeMovementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountBillableTimeMovementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountBillableTimeMovementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountBillableTimeMovementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-movement-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-capital-gains-on-investments-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountCurrencyGainsLossesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountCurrencyGainsLossesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-currency-gains-losses-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountFixedAssetDepreciationForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountFixedAssetDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountFixedAssetDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountFixedAssetDepreciationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountFixedAssetDepreciationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-depreciation-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountFixedAssetLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountFixedAssetLossOnDisposalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountFixedAssetLossOnDisposalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-loss-on-disposal-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountIntangibleAssetsAmortizationForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountIntangibleAssetsAmortizationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountIntangibleAssetsAmortizationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-amortization-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-gains-loss-on-disposal-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountInventoryPurchasesForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountInventoryPurchasesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountInventoryPurchasesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountInventoryPurchasesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountInventoryPurchasesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-purchases-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountInventorySalesForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountInventorySalesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountInventorySalesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountInventorySalesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountInventorySalesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-sales-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountLatePaymentFeesForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountLatePaymentFeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountLatePaymentFeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountLatePaymentFeesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountLatePaymentFeesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-late-payment-fees-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementAccountRoundingExpenseForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementAccountRoundingExpenseFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementAccountRoundingExpenseFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementAccountRoundingExpenseForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementAccountRoundingExpenseForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-rounding-expense-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementActualVsBudgetForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementActualVsBudgetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementActualVsBudgetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementActualVsBudgetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementActualVsBudgetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-actual-vs-budget-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementGroupForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-group-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementSubtotalForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementSubtotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementSubtotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementSubtotalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementSubtotalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-subtotal-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfitAndLossStatementTotalForm operation.
     * @callback module:api/DefaultApi~deleteProfitAndLossStatementTotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProfitAndLossStatementTotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfitAndLossStatementTotalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProfitAndLossStatementTotalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-total-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectForm operation.
     * @callback module:api/DefaultApi~deleteProjectFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteProjectFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteProjectForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePurchaseInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~deletePurchaseInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePurchaseInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePurchaseInvoiceFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePurchaseInvoiceFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~deletePurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePurchaseInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePurchaseInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deletePurchaseInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePurchaseInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePurchaseInvoiceStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePurchaseInvoiceStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePurchaseOrderFooterForm operation.
     * @callback module:api/DefaultApi~deletePurchaseOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePurchaseOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePurchaseOrderFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePurchaseOrderFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePurchaseOrderForm operation.
     * @callback module:api/DefaultApi~deletePurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePurchaseOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePurchaseQuoteFooterForm operation.
     * @callback module:api/DefaultApi~deletePurchaseQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePurchaseQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePurchaseQuoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePurchaseQuoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~deletePurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deletePurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePurchaseQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deletePurchaseQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRealizedCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~deleteRealizedCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRealizedCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRealizedCurrencyGainsLossesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRealizedCurrencyGainsLossesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-currency-gains-losses-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRealizedInvestmentGainsSummaryForm operation.
     * @callback module:api/DefaultApi~deleteRealizedInvestmentGainsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRealizedInvestmentGainsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRealizedInvestmentGainsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRealizedInvestmentGainsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-investment-gains-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceiptFooterForm operation.
     * @callback module:api/DefaultApi~deleteReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceiptFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteReceiptFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceiptForm operation.
     * @callback module:api/DefaultApi~deleteReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceiptRuleForm operation.
     * @callback module:api/DefaultApi~deleteReceiptRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteReceiptRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceiptRuleForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteReceiptRuleForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-rule-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceiptsAndPaymentsSummaryForm operation.
     * @callback module:api/DefaultApi~deleteReceiptsAndPaymentsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteReceiptsAndPaymentsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceiptsAndPaymentsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteReceiptsAndPaymentsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipts-and-payments-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~deleteRecurringInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringInterAccountTransferForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringInterAccountTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-inter-account-transfer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringJournalEntryForm operation.
     * @callback module:api/DefaultApi~deleteRecurringJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringJournalEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringJournalEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-journal-entry-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringPaymentForm operation.
     * @callback module:api/DefaultApi~deleteRecurringPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringPaymentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payment-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringPayslipForm operation.
     * @callback module:api/DefaultApi~deleteRecurringPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringPayslipForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payslip-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~deleteRecurringPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringPurchaseInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-invoice-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~deleteRecurringPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringPurchaseOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-order-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringReceiptForm operation.
     * @callback module:api/DefaultApi~deleteRecurringReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-receipt-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~deleteRecurringSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringSalesInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-invoice-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringSalesOrderForm operation.
     * @callback module:api/DefaultApi~deleteRecurringSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringSalesOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-order-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecurringSalesQuoteForm operation.
     * @callback module:api/DefaultApi~deleteRecurringSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteRecurringSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecurringSalesQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRecurringSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-quote-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportTransformationForm operation.
     * @callback module:api/DefaultApi~deleteReportTransformationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteReportTransformationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReportTransformationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteReportTransformationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportTransformationLabelForm operation.
     * @callback module:api/DefaultApi~deleteReportTransformationLabelFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteReportTransformationLabelFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReportTransformationLabelForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteReportTransformationLabelForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-label-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportTransformationReportForm operation.
     * @callback module:api/DefaultApi~deleteReportTransformationReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteReportTransformationReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReportTransformationReportForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteReportTransformationReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-report-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~deleteSalesInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesInvoiceFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesInvoiceFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~deleteSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteSalesInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesInvoiceStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesInvoiceStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesInvoiceTotalsByCustomFieldForm operation.
     * @callback module:api/DefaultApi~deleteSalesInvoiceTotalsByCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesInvoiceTotalsByCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesInvoiceTotalsByCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesInvoiceTotalsByCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-custom-field-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesInvoiceTotalsByCustomerForm operation.
     * @callback module:api/DefaultApi~deleteSalesInvoiceTotalsByCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesInvoiceTotalsByCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesInvoiceTotalsByCustomerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesInvoiceTotalsByCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-customer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesInvoiceTotalsByItemForm operation.
     * @callback module:api/DefaultApi~deleteSalesInvoiceTotalsByItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesInvoiceTotalsByItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesInvoiceTotalsByItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesInvoiceTotalsByItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-item-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesOrderFooterForm operation.
     * @callback module:api/DefaultApi~deleteSalesOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesOrderFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesOrderFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesOrderForm operation.
     * @callback module:api/DefaultApi~deleteSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesQuoteFooterForm operation.
     * @callback module:api/DefaultApi~deleteSalesQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesQuoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesQuoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-footer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesQuoteForm operation.
     * @callback module:api/DefaultApi~deleteSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpecialAccountForm operation.
     * @callback module:api/DefaultApi~deleteSpecialAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSpecialAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpecialAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSpecialAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpecialAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~deleteSpecialAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSpecialAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpecialAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSpecialAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-starting-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStatementOfChangesInEquityForm operation.
     * @callback module:api/DefaultApi~deleteStatementOfChangesInEquityFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteStatementOfChangesInEquityFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStatementOfChangesInEquityForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteStatementOfChangesInEquityForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/statement-of-changes-in-equity-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSummaryForm operation.
     * @callback module:api/DefaultApi~deleteSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupplierForm operation.
     * @callback module:api/DefaultApi~deleteSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSupplierForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSupplierForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupplierStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~deleteSupplierStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSupplierStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSupplierStatementsTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSupplierStatementsTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-transactions-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupplierStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~deleteSupplierStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSupplierStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSupplierStatementsUnpaidInvoicesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSupplierStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-unpaid-invoices-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupplierSummaryForm operation.
     * @callback module:api/DefaultApi~deleteSupplierSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteSupplierSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSupplierSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSupplierSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTabsForm operation.
     * @callback module:api/DefaultApi~deleteTabsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTabsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTabsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTabsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tabs-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxAmountReportingCategoryForm operation.
     * @callback module:api/DefaultApi~deleteTaxAmountReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxAmountReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxAmountReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxAmountReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reporting-category-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxAmountReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~deleteTaxAmountReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxAmountReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxAmountReversedReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxAmountReversedReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reversed-reporting-category-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxAuditForm operation.
     * @callback module:api/DefaultApi~deleteTaxAuditFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxAuditFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxAuditForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxAuditForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-audit-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxCodeForm operation.
     * @callback module:api/DefaultApi~deleteTaxCodeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxCodeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxCodeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxCodeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxCodeReportingCategoryForm operation.
     * @callback module:api/DefaultApi~deleteTaxCodeReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxCodeReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxCodeReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxCodeReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reporting-category-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxCodeReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~deleteTaxCodeReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxCodeReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxCodeReversedReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxCodeReversedReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reversed-reporting-category-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxReconciliationForm operation.
     * @callback module:api/DefaultApi~deleteTaxReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxReconciliationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxReconciliationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-reconciliation-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxSummaryForm operation.
     * @callback module:api/DefaultApi~deleteTaxSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-summary-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxTransactionsForm operation.
     * @callback module:api/DefaultApi~deleteTaxTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-transactions-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxablePurchasesPerSupplierForm operation.
     * @callback module:api/DefaultApi~deleteTaxablePurchasesPerSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxablePurchasesPerSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxablePurchasesPerSupplierForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxablePurchasesPerSupplierForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-purchases-per-supplier-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxableSalesPerCustomerForm operation.
     * @callback module:api/DefaultApi~deleteTaxableSalesPerCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTaxableSalesPerCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxableSalesPerCustomerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTaxableSalesPerCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-sales-per-customer-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTextCustomFieldForm operation.
     * @callback module:api/DefaultApi~deleteTextCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTextCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTextCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTextCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/text-custom-field-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteThemeForm operation.
     * @callback module:api/DefaultApi~deleteThemeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteThemeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThemeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteThemeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/theme-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrialBalanceForm operation.
     * @callback module:api/DefaultApi~deleteTrialBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteTrialBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrialBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTrialBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trial-balance-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserPermissionsForm operation.
     * @callback module:api/DefaultApi~deleteUserPermissionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteUserPermissionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserPermissionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteUserPermissionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-permissions-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebServiceForExchangeRatesForm operation.
     * @callback module:api/DefaultApi~deleteWebServiceForExchangeRatesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteWebServiceForExchangeRatesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebServiceForExchangeRatesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteWebServiceForExchangeRatesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/web-service-for-exchange-rates-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWithholdingTaxForm operation.
     * @callback module:api/DefaultApi~deleteWithholdingTaxFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteWithholdingTaxFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWithholdingTaxForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteWithholdingTaxForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWithholdingTaxReceiptForm operation.
     * @callback module:api/DefaultApi~deleteWithholdingTaxReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~deleteWithholdingTaxReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWithholdingTaxReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteWithholdingTaxReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-receipt-form/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessTokenForm operation.
     * @callback module:api/DefaultApi~getAccessTokenFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAccessTokenFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAccessTokenForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAccessTokenForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/access-token-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessTokens operation.
     * @callback module:api/DefaultApi~getAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access Tokens
     * Retrieve list of access tokens. For more information, see https://www.manager.io/guides?access-tokens
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAccessTokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/access-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgedPayablesForm operation.
     * @callback module:api/DefaultApi~getAgedPayablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAgedPayablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAgedPayablesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAgedPayablesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-payables-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgedPayablesView operation.
     * @callback module:api/DefaultApi~getAgedPayablesViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAgedPayablesViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAgedPayablesView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAgedPayablesView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-payables-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgedReceivablesForm operation.
     * @callback module:api/DefaultApi~getAgedReceivablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAgedReceivablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAgedReceivablesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAgedReceivablesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-receivables-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgedReceivablesView operation.
     * @callback module:api/DefaultApi~getAgedReceivablesViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAgedReceivablesViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAgedReceivablesView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAgedReceivablesView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-receivables-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAmortizationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~getAmortizationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAmortizationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAmortizationCalculationWorksheetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAmortizationCalculationWorksheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-calculation-worksheet-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAmortizationCalculationWorksheetView operation.
     * @callback module:api/DefaultApi~getAmortizationCalculationWorksheetViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAmortizationCalculationWorksheetViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAmortizationCalculationWorksheetView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAmortizationCalculationWorksheetView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-calculation-worksheet-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAmortizationEntries operation.
     * @callback module:api/DefaultApi~getAmortizationEntriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Amortization Entries
     * Retrieve list of amortization entries. For more information, see https://www.manager.io/guides?amortization-entries
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getAmortizationEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAmortizationEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAmortizationEntryForm operation.
     * @callback module:api/DefaultApi~getAmortizationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAmortizationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAmortizationEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAmortizationEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-entry-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachmentForm operation.
     * @callback module:api/DefaultApi~getAttachmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getAttachmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAttachmentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAttachmentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attachment-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetAccountStartingBalanceList operation.
     * @callback module:api/DefaultApi~getBalanceSheetAccountStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetAccountStartingBalanceList
     * Retrieve list of balancesheetaccountstartingbalancelist. For more information, see https://www.manager.io/guides?balance-sheet-account-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getBalanceSheetAccountStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetAccountStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetAccountsPayableAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetAccountsPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetAccountsPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetAccountsPayableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetAccountsPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-payable-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetAccountsReceivableAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetAccountsReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetAccountsReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetAccountsReceivableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetAccountsReceivableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-receivable-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetBillableExpensesAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetBillableExpensesAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetBillableExpensesAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetBillableExpensesAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetBillableExpensesAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-expenses-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetBillableTimeAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetBillableTimeAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetBillableTimeAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetBillableTimeAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetBillableTimeAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-time-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetCapitalAccountsAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetCapitalAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetCapitalAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetCapitalAccountsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetCapitalAccountsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-capital-accounts-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetCashAtBankAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetCashAtBankAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetCashAtBankAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetCashAtBankAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetCashAtBankAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-cash-at-bank-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetEmployeeClearingAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetEmployeeClearingAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetEmployeeClearingAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetEmployeeClearingAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetEmployeeClearingAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-employee-clearing-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetEquityGroupNameForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetEquityGroupNameFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetEquityGroupNameFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetEquityGroupNameForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetEquityGroupNameForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-equity-group-name-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetExpenseClaimsAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetExpenseClaimsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetExpenseClaimsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetExpenseClaimsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetExpenseClaimsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-expense-claims-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-accumulated-depreciation-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetFixedAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetFixedAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetFixedAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetFixedAssetsAtCostAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetFixedAssetsAtCostAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-at-cost-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetGroupForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-group-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-accumulated-amortization-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetIntangibleAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetIntangibleAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetIntangibleAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetIntangibleAssetsAtCostAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetIntangibleAssetsAtCostAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-at-cost-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetInterAccountTransfersForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetInterAccountTransfersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetInterAccountTransfersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetInterAccountTransfersForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetInterAccountTransfersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inter-account-transfers-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetInventoryOnHandAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetInventoryOnHandAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetInventoryOnHandAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetInventoryOnHandAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetInventoryOnHandAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inventory-on-hand-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetInvestmentsAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetInvestmentsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetInvestmentsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetInvestmentsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetInvestmentsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-investments-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetProductionInProgressAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetProductionInProgressAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetProductionInProgressAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetProductionInProgressAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetProductionInProgressAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-production-in-progress-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetRetainedEarningsAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetRetainedEarningsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetRetainedEarningsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetRetainedEarningsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetRetainedEarningsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-retained-earnings-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetSpecialAccountsAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetSpecialAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetSpecialAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetSpecialAccountsAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetSpecialAccountsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-special-accounts-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetSuspenseAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetSuspenseAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetSuspenseAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetSuspenseAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetSuspenseAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-suspense-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetTaxPayableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetTaxPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-tax-payable-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetTransactions operation.
     * @callback module:api/DefaultApi~getBalanceSheetTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetTransactions
     * Retrieve list of balancesheettransactions. For more information, see https://www.manager.io/guides?balance-sheet-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getBalanceSheetTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetView operation.
     * @callback module:api/DefaultApi~getBalanceSheetViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetWithholdingTaxAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetWithholdingTaxAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetWithholdingTaxAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetWithholdingTaxAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetWithholdingTaxAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetWithholdingTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetWithholdingTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetWithholdingTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetWithholdingTaxPayableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetWithholdingTaxPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-payable-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceSheetWithholdingTaxReceivableAccountForm operation.
     * @callback module:api/DefaultApi~getBalanceSheetWithholdingTaxReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBalanceSheetWithholdingTaxReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBalanceSheetWithholdingTaxReceivableAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBalanceSheetWithholdingTaxReceivableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-receivable-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankAccountSummaryForm operation.
     * @callback module:api/DefaultApi~getBankAccountSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBankAccountSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankAccountSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBankAccountSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-account-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankAccountSummaryView operation.
     * @callback module:api/DefaultApi~getBankAccountSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBankAccountSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankAccountSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBankAccountSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-account-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankAndCashAccounts operation.
     * @callback module:api/DefaultApi~getBankAndCashAccountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bank and Cash Accounts
     * Retrieve list of bank and cash accounts. For more information, see https://www.manager.io/guides?bank-and-cash-accounts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getBankAndCashAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankAndCashAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-and-cash-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankFeedProviderForm operation.
     * @callback module:api/DefaultApi~getBankFeedProviderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBankFeedProviderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankFeedProviderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBankFeedProviderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-feed-provider-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankFeedProviders operation.
     * @callback module:api/DefaultApi~getBankFeedProvidersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bank Feed Providers
     * Retrieve list of bank feed providers. For more information, see https://www.manager.io/guides?bank-feed-providers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getBankFeedProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankFeedProviders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-feed-providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankOrCashAccountForm operation.
     * @callback module:api/DefaultApi~getBankOrCashAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBankOrCashAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankOrCashAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBankOrCashAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankOrCashAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getBankOrCashAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBankOrCashAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankOrCashAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBankOrCashAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankOrCashAccountStartingBalanceList operation.
     * @callback module:api/DefaultApi~getBankOrCashAccountStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BankOrCashAccountStartingBalanceList
     * Retrieve list of bankorcashaccountstartingbalancelist. For more information, see https://www.manager.io/guides?bank-or-cash-account-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getBankOrCashAccountStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankOrCashAccountStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankReconciliationForm operation.
     * @callback module:api/DefaultApi~getBankReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBankReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankReconciliationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBankReconciliationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-reconciliation-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankReconciliations operation.
     * @callback module:api/DefaultApi~getBankReconciliationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bank Reconciliations
     * Retrieve list of bank reconciliations. For more information, see https://www.manager.io/guides?bank-reconciliations
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getBankReconciliationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBankReconciliations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-reconciliations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBaseCurrencyForm operation.
     * @callback module:api/DefaultApi~getBaseCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBaseCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBaseCurrencyForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBaseCurrencyForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/base-currency-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillableExpensesForm operation.
     * @callback module:api/DefaultApi~getBillableExpensesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBillableExpensesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBillableExpensesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBillableExpensesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-expenses-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillableTime operation.
     * @callback module:api/DefaultApi~getBillableTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Billable Time
     * Retrieve list of billable time. For more information, see https://www.manager.io/guides?billable-time
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getBillableTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBillableTime(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillableTimeEntryForm operation.
     * @callback module:api/DefaultApi~getBillableTimeEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBillableTimeEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBillableTimeEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBillableTimeEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-entry-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillableTimeSummaryForm operation.
     * @callback module:api/DefaultApi~getBillableTimeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBillableTimeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBillableTimeSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBillableTimeSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillableTimeSummaryView operation.
     * @callback module:api/DefaultApi~getBillableTimeSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBillableTimeSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBillableTimeSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBillableTimeSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessDetailsForm operation.
     * @callback module:api/DefaultApi~getBusinessDetailsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getBusinessDetailsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBusinessDetailsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBusinessDetailsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/business-details-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapitalAccountForm operation.
     * @callback module:api/DefaultApi~getCapitalAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCapitalAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapitalAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCapitalAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapitalAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getCapitalAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCapitalAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapitalAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCapitalAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapitalAccountStartingBalanceList operation.
     * @callback module:api/DefaultApi~getCapitalAccountStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CapitalAccountStartingBalanceList
     * Retrieve list of capitalaccountstartingbalancelist. For more information, see https://www.manager.io/guides?capital-account-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCapitalAccountStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapitalAccountStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapitalAccounts operation.
     * @callback module:api/DefaultApi~getCapitalAccountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capital Accounts
     * Retrieve list of capital accounts. For more information, see https://www.manager.io/guides?capital-accounts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCapitalAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapitalAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapitalAccountsSummaryForm operation.
     * @callback module:api/DefaultApi~getCapitalAccountsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCapitalAccountsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapitalAccountsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCapitalAccountsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-accounts-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapitalAccountsSummaryView operation.
     * @callback module:api/DefaultApi~getCapitalAccountsSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCapitalAccountsSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapitalAccountsSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCapitalAccountsSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-accounts-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapitalSubaccountForm operation.
     * @callback module:api/DefaultApi~getCapitalSubaccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCapitalSubaccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapitalSubaccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCapitalSubaccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-subaccount-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCashFlowStatementFinancingActivityGroupForm operation.
     * @callback module:api/DefaultApi~getCashFlowStatementFinancingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCashFlowStatementFinancingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCashFlowStatementFinancingActivityGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCashFlowStatementFinancingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-financing-activity-group-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCashFlowStatementForm operation.
     * @callback module:api/DefaultApi~getCashFlowStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCashFlowStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCashFlowStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCashFlowStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCashFlowStatementInvestingActivityGroupForm operation.
     * @callback module:api/DefaultApi~getCashFlowStatementInvestingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCashFlowStatementInvestingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCashFlowStatementInvestingActivityGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCashFlowStatementInvestingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-investing-activity-group-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCashFlowStatementOperatingActivityGroupForm operation.
     * @callback module:api/DefaultApi~getCashFlowStatementOperatingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCashFlowStatementOperatingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCashFlowStatementOperatingActivityGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCashFlowStatementOperatingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-operating-activity-group-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCashFlowStatementView operation.
     * @callback module:api/DefaultApi~getCashFlowStatementViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCashFlowStatementViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCashFlowStatementView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCashFlowStatementView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChartOfAccounts operation.
     * @callback module:api/DefaultApi~getChartOfAccountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Chart of Accounts
     * Retrieve list of chart of accounts. For more information, see https://www.manager.io/guides?chart-of-accounts
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getChartOfAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChartOfAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/chart-of-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckboxCustomFieldForm operation.
     * @callback module:api/DefaultApi~getCheckboxCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCheckboxCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCheckboxCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCheckboxCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checkbox-custom-field-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckboxCustomFields operation.
     * @callback module:api/DefaultApi~getCheckboxCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checkbox Custom Fields
     * Retrieve list of checkbox custom fields. For more information, see https://www.manager.io/guides?checkbox-custom-fields
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCheckboxCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCheckboxCustomFields(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/checkbox-custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassicCustomFieldForm operation.
     * @callback module:api/DefaultApi~getClassicCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getClassicCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getClassicCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getClassicCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/classic-custom-field-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassicCustomFields operation.
     * @callback module:api/DefaultApi~getClassicCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classic Custom Fields
     * Retrieve list of classic custom fields. For more information, see https://www.manager.io/guides?classic-custom-fields
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getClassicCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getClassicCustomFields(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/classic-custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForBankAccountsForm operation.
     * @callback module:api/DefaultApi~getControlAccountForBankAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForBankAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForBankAccountsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForBankAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-bank-accounts-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForCapitalAccountsForm operation.
     * @callback module:api/DefaultApi~getControlAccountForCapitalAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForCapitalAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForCapitalAccountsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForCapitalAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-capital-accounts-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForCustomersForm operation.
     * @callback module:api/DefaultApi~getControlAccountForCustomersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForCustomersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForCustomersForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForCustomersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-customers-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForEmployeesForm operation.
     * @callback module:api/DefaultApi~getControlAccountForEmployeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForEmployeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForEmployeesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForEmployeesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-employees-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForFixedAssetsAccumulatedDepreciationForm operation.
     * @callback module:api/DefaultApi~getControlAccountForFixedAssetsAccumulatedDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForFixedAssetsAccumulatedDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForFixedAssetsAccumulatedDepreciationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForFixedAssetsAccumulatedDepreciationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-accumulated-depreciation-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForFixedAssetsForm operation.
     * @callback module:api/DefaultApi~getControlAccountForFixedAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForFixedAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForFixedAssetsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForFixedAssetsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForIntangibleAssetsAccumulatedAmortizationForm operation.
     * @callback module:api/DefaultApi~getControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForIntangibleAssetsAccumulatedAmortizationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForIntangibleAssetsAccumulatedAmortizationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-accumulated-amortization-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForIntangibleAssetsForm operation.
     * @callback module:api/DefaultApi~getControlAccountForIntangibleAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForIntangibleAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForIntangibleAssetsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForIntangibleAssetsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForInventoryItemsForm operation.
     * @callback module:api/DefaultApi~getControlAccountForInventoryItemsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForInventoryItemsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForInventoryItemsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForInventoryItemsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-inventory-items-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForInvestmentsForm operation.
     * @callback module:api/DefaultApi~getControlAccountForInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForInvestmentsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForInvestmentsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-investments-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForSpecialAccountsForm operation.
     * @callback module:api/DefaultApi~getControlAccountForSpecialAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForSpecialAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForSpecialAccountsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForSpecialAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-special-accounts-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControlAccountForSuppliersForm operation.
     * @callback module:api/DefaultApi~getControlAccountForSuppliersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getControlAccountForSuppliersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getControlAccountForSuppliersForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getControlAccountForSuppliersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-suppliers-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteFooterForm operation.
     * @callback module:api/DefaultApi~getCreditNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCreditNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCreditNoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCreditNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteFooters operation.
     * @callback module:api/DefaultApi~getCreditNoteFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreditNoteFooters
     * Retrieve list of creditnotefooters. For more information, see https://www.manager.io/guides?credit-note-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCreditNoteFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCreditNoteFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteForm operation.
     * @callback module:api/DefaultApi~getCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCreditNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCreditNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteLines operation.
     * @callback module:api/DefaultApi~getCreditNoteLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreditNoteLines
     * Retrieve list of creditnotelines. For more information, see https://www.manager.io/guides?credit-note-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCreditNoteLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCreditNoteLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNotes operation.
     * @callback module:api/DefaultApi~getCreditNotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Credit Notes
     * Retrieve list of credit notes. For more information, see https://www.manager.io/guides?credit-notes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCreditNotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCreditNotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReportForm operation.
     * @callback module:api/DefaultApi~getCustomReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCustomReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomReportForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCustomReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom-report-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerForm operation.
     * @callback module:api/DefaultApi~getCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerPortalForm operation.
     * @callback module:api/DefaultApi~getCustomerPortalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCustomerPortalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomerPortalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCustomerPortalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-portal-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~getCustomerStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCustomerStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomerStatementsTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCustomerStatementsTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-transactions-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~getCustomerStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCustomerStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomerStatementsUnpaidInvoicesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCustomerStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-unpaid-invoices-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerSummaryForm operation.
     * @callback module:api/DefaultApi~getCustomerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCustomerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomerSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCustomerSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerSummaryView operation.
     * @callback module:api/DefaultApi~getCustomerSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getCustomerSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomerSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCustomerSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomers operation.
     * @callback module:api/DefaultApi~getCustomersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customers
     * Retrieve list of customers. For more information, see https://www.manager.io/guides?customers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersQtyToDeliver operation.
     * @callback module:api/DefaultApi~getCustomersQtyToDeliverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CustomersQtyToDeliver
     * Retrieve list of customersqtytodeliver. For more information, see https://www.manager.io/guides?customers-qty-to-deliver
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getCustomersQtyToDeliverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomersQtyToDeliver(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/customers-qty-to-deliver', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDateAndNumberFormatForm operation.
     * @callback module:api/DefaultApi~getDateAndNumberFormatFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDateAndNumberFormatFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDateAndNumberFormatForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDateAndNumberFormatForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-and-number-format-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDateCustomFieldForm operation.
     * @callback module:api/DefaultApi~getDateCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDateCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDateCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDateCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-custom-field-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDateCustomFields operation.
     * @callback module:api/DefaultApi~getDateCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Date Custom Fields
     * Retrieve list of date custom fields. For more information, see https://www.manager.io/guides?date-custom-fields
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDateCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDateCustomFields(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDebitNoteFooterForm operation.
     * @callback module:api/DefaultApi~getDebitNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDebitNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDebitNoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDebitNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDebitNoteFooters operation.
     * @callback module:api/DefaultApi~getDebitNoteFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DebitNoteFooters
     * Retrieve list of debitnotefooters. For more information, see https://www.manager.io/guides?debit-note-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDebitNoteFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDebitNoteFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDebitNoteForm operation.
     * @callback module:api/DefaultApi~getDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDebitNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDebitNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDebitNoteLines operation.
     * @callback module:api/DefaultApi~getDebitNoteLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DebitNoteLines
     * Retrieve list of debitnotelines. For more information, see https://www.manager.io/guides?debit-note-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDebitNoteLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDebitNoteLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDebitNotes operation.
     * @callback module:api/DefaultApi~getDebitNotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Debit Notes
     * Retrieve list of debit notes. For more information, see https://www.manager.io/guides?debit-notes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDebitNotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDebitNotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryNoteFooterForm operation.
     * @callback module:api/DefaultApi~getDeliveryNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDeliveryNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDeliveryNoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDeliveryNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryNoteFooters operation.
     * @callback module:api/DefaultApi~getDeliveryNoteFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeliveryNoteFooters
     * Retrieve list of deliverynotefooters. For more information, see https://www.manager.io/guides?delivery-note-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDeliveryNoteFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDeliveryNoteFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~getDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDeliveryNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDeliveryNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryNoteLines operation.
     * @callback module:api/DefaultApi~getDeliveryNoteLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeliveryNoteLines
     * Retrieve list of deliverynotelines. For more information, see https://www.manager.io/guides?delivery-note-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDeliveryNoteLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDeliveryNoteLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryNotes operation.
     * @callback module:api/DefaultApi~getDeliveryNotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delivery Notes
     * Retrieve list of delivery notes. For more information, see https://www.manager.io/guides?delivery-notes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDeliveryNotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDeliveryNotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepreciationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~getDepreciationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDepreciationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDepreciationCalculationWorksheetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDepreciationCalculationWorksheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-calculation-worksheet-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepreciationCalculationWorksheetView operation.
     * @callback module:api/DefaultApi~getDepreciationCalculationWorksheetViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDepreciationCalculationWorksheetViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDepreciationCalculationWorksheetView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDepreciationCalculationWorksheetView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-calculation-worksheet-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepreciationEntries operation.
     * @callback module:api/DefaultApi~getDepreciationEntriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Depreciation Entries
     * Retrieve list of depreciation entries. For more information, see https://www.manager.io/guides?depreciation-entries
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDepreciationEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDepreciationEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepreciationEntryForm operation.
     * @callback module:api/DefaultApi~getDepreciationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDepreciationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDepreciationEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDepreciationEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-entry-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDivisionExceptionReportForm operation.
     * @callback module:api/DefaultApi~getDivisionExceptionReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDivisionExceptionReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDivisionExceptionReportForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDivisionExceptionReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-exception-report-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDivisionExceptionReportView operation.
     * @callback module:api/DefaultApi~getDivisionExceptionReportViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDivisionExceptionReportViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDivisionExceptionReportView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDivisionExceptionReportView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-exception-report-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDivisionForm operation.
     * @callback module:api/DefaultApi~getDivisionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getDivisionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDivisionForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDivisionForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDivisions operation.
     * @callback module:api/DefaultApi~getDivisionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Divisions
     * Retrieve list of divisions. For more information, see https://www.manager.io/guides?divisions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getDivisionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDivisions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/divisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSettingsForm operation.
     * @callback module:api/DefaultApi~getEmailSettingsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailSettingsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailSettingsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailSettingsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-settings-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForCreditNoteForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForCreditNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForCreditNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-credit-note-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForCustomerStatementForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForCustomerStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForCustomerStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForCustomerStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForCustomerStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-customer-statement-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForDebitNoteForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForDebitNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForDebitNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-debit-note-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForDeliveryNoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForDeliveryNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-delivery-note-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForPaymentForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForPaymentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payment-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForPayslipForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForPayslipForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payslip-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForPurchaseInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-invoice-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForPurchaseOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-order-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForPurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForPurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForPurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForPurchaseQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForPurchaseQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-quote-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForReceiptForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-receipt-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForSalesInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-invoice-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForSalesOrderForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForSalesOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-order-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplateForSalesQuoteForm operation.
     * @callback module:api/DefaultApi~getEmailTemplateForSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmailTemplateForSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmailTemplateForSalesQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmailTemplateForSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-quote-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeForm operation.
     * @callback module:api/DefaultApi~getEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmployeeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmployeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getEmployeeStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmployeeStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmployeeStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmployeeStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeStartingBalanceList operation.
     * @callback module:api/DefaultApi~getEmployeeStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmployeeStartingBalanceList
     * Retrieve list of employeestartingbalancelist. For more information, see https://www.manager.io/guides?employee-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getEmployeeStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmployeeStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSummaryForm operation.
     * @callback module:api/DefaultApi~getEmployeeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmployeeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmployeeSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmployeeSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeSummaryView operation.
     * @callback module:api/DefaultApi~getEmployeeSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getEmployeeSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmployeeSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getEmployeeSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployees operation.
     * @callback module:api/DefaultApi~getEmployeesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Employees
     * Retrieve list of employees. For more information, see https://www.manager.io/guides?employees
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getEmployeesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEmployees(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExchangeRateForm operation.
     * @callback module:api/DefaultApi~getExchangeRateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getExchangeRateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExchangeRateForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getExchangeRateForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/exchange-rate-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExchangeRates operation.
     * @callback module:api/DefaultApi~getExchangeRatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange Rates
     * Retrieve list of exchange rates. For more information, see https://www.manager.io/guides?exchange-rates
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getExchangeRatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExchangeRates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/exchange-rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimFooterForm operation.
     * @callback module:api/DefaultApi~getExpenseClaimFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getExpenseClaimFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaimFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getExpenseClaimFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimFooters operation.
     * @callback module:api/DefaultApi~getExpenseClaimFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExpenseClaimFooters
     * Retrieve list of expenseclaimfooters. For more information, see https://www.manager.io/guides?expense-claim-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getExpenseClaimFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaimFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimForm operation.
     * @callback module:api/DefaultApi~getExpenseClaimFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getExpenseClaimFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaimForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getExpenseClaimForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimLines operation.
     * @callback module:api/DefaultApi~getExpenseClaimLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExpenseClaimLines
     * Retrieve list of expenseclaimlines. For more information, see https://www.manager.io/guides?expense-claim-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getExpenseClaimLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaimLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimPayerForm operation.
     * @callback module:api/DefaultApi~getExpenseClaimPayerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getExpenseClaimPayerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaimPayerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getExpenseClaimPayerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-payer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaims operation.
     * @callback module:api/DefaultApi~getExpenseClaimsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expense Claims
     * Retrieve list of expense claims. For more information, see https://www.manager.io/guides?expense-claims
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getExpenseClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaims(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimsSummaryForm operation.
     * @callback module:api/DefaultApi~getExpenseClaimsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getExpenseClaimsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaimsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getExpenseClaimsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claims-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimsSummaryView operation.
     * @callback module:api/DefaultApi~getExpenseClaimsSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getExpenseClaimsSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExpenseClaimsSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getExpenseClaimsSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claims-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtensionForm operation.
     * @callback module:api/DefaultApi~getExtensionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getExtensionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExtensionForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getExtensionForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extension-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedAssetForm operation.
     * @callback module:api/DefaultApi~getFixedAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getFixedAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFixedAssetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getFixedAssetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getFixedAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getFixedAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFixedAssetStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getFixedAssetStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedAssetStartingBalanceList operation.
     * @callback module:api/DefaultApi~getFixedAssetStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FixedAssetStartingBalanceList
     * Retrieve list of fixedassetstartingbalancelist. For more information, see https://www.manager.io/guides?fixed-asset-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getFixedAssetStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFixedAssetStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedAssetSummaryForm operation.
     * @callback module:api/DefaultApi~getFixedAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getFixedAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFixedAssetSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getFixedAssetSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedAssetSummaryView operation.
     * @callback module:api/DefaultApi~getFixedAssetSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getFixedAssetSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFixedAssetSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getFixedAssetSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedAssets operation.
     * @callback module:api/DefaultApi~getFixedAssetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fixed Assets
     * Retrieve list of fixed assets. For more information, see https://www.manager.io/guides?fixed-assets
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getFixedAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFixedAssets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolderForm operation.
     * @callback module:api/DefaultApi~getFolderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getFolderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFolderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getFolderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/folder-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolders operation.
     * @callback module:api/DefaultApi~getFoldersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Folders
     * Retrieve list of folders. For more information, see https://www.manager.io/guides?folders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFolders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForecastForm operation.
     * @callback module:api/DefaultApi~getForecastFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getForecastFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForecastForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getForecastForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForecastProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~getForecastProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getForecastProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForecastProfitAndLossStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getForecastProfitAndLossStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-profit-and-loss-statement-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForecastProfitAndLossStatementView operation.
     * @callback module:api/DefaultApi~getForecastProfitAndLossStatementViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getForecastProfitAndLossStatementViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForecastProfitAndLossStatementView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getForecastProfitAndLossStatementView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-profit-and-loss-statement-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForeignCurrencies operation.
     * @callback module:api/DefaultApi~getForeignCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Foreign Currencies
     * Retrieve list of foreign currencies. For more information, see https://www.manager.io/guides?foreign-currencies
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getForeignCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForeignCurrencies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/foreign-currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getForeignCurrencyForm operation.
     * @callback module:api/DefaultApi~getForeignCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getForeignCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getForeignCurrencyForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getForeignCurrencyForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/foreign-currency-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneralLedgerSummaryForm operation.
     * @callback module:api/DefaultApi~getGeneralLedgerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getGeneralLedgerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGeneralLedgerSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getGeneralLedgerSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneralLedgerSummaryView operation.
     * @callback module:api/DefaultApi~getGeneralLedgerSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getGeneralLedgerSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGeneralLedgerSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getGeneralLedgerSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneralLedgerTransactionsForm operation.
     * @callback module:api/DefaultApi~getGeneralLedgerTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getGeneralLedgerTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGeneralLedgerTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getGeneralLedgerTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-transactions-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneralLedgerTransactionsView operation.
     * @callback module:api/DefaultApi~getGeneralLedgerTransactionsViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getGeneralLedgerTransactionsViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGeneralLedgerTransactionsView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getGeneralLedgerTransactionsView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-transactions-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoodsReceiptFooterForm operation.
     * @callback module:api/DefaultApi~getGoodsReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getGoodsReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGoodsReceiptFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getGoodsReceiptFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoodsReceiptFooters operation.
     * @callback module:api/DefaultApi~getGoodsReceiptFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GoodsReceiptFooters
     * Retrieve list of goodsreceiptfooters. For more information, see https://www.manager.io/guides?goods-receipt-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getGoodsReceiptFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGoodsReceiptFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoodsReceiptForm operation.
     * @callback module:api/DefaultApi~getGoodsReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getGoodsReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGoodsReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getGoodsReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoodsReceiptLines operation.
     * @callback module:api/DefaultApi~getGoodsReceiptLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GoodsReceiptLines
     * Retrieve list of goodsreceiptlines. For more information, see https://www.manager.io/guides?goods-receipt-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getGoodsReceiptLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGoodsReceiptLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoodsReceipts operation.
     * @callback module:api/DefaultApi~getGoodsReceiptsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goods Receipts
     * Retrieve list of goods receipts. For more information, see https://www.manager.io/guides?goods-receipts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getGoodsReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGoodsReceipts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistory operation.
     * @callback module:api/DefaultApi~getHistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * History
     * Retrieve list of history. For more information, see https://www.manager.io/guides?history
     * @param {Object} opts Optional parameters
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getHistory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntangibleAssetForm operation.
     * @callback module:api/DefaultApi~getIntangibleAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getIntangibleAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntangibleAssetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getIntangibleAssetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntangibleAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getIntangibleAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getIntangibleAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntangibleAssetStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getIntangibleAssetStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntangibleAssetStartingBalanceList operation.
     * @callback module:api/DefaultApi~getIntangibleAssetStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IntangibleAssetStartingBalanceList
     * Retrieve list of intangibleassetstartingbalancelist. For more information, see https://www.manager.io/guides?intangible-asset-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getIntangibleAssetStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntangibleAssetStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntangibleAssetSummaryForm operation.
     * @callback module:api/DefaultApi~getIntangibleAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getIntangibleAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntangibleAssetSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getIntangibleAssetSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntangibleAssetSummaryView operation.
     * @callback module:api/DefaultApi~getIntangibleAssetSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getIntangibleAssetSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntangibleAssetSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getIntangibleAssetSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntangibleAssets operation.
     * @callback module:api/DefaultApi~getIntangibleAssetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Intangible Assets
     * Retrieve list of intangible assets. For more information, see https://www.manager.io/guides?intangible-assets
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getIntangibleAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIntangibleAssets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInterAccountTransferFooterForm operation.
     * @callback module:api/DefaultApi~getInterAccountTransferFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInterAccountTransferFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInterAccountTransferFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInterAccountTransferFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInterAccountTransferFooters operation.
     * @callback module:api/DefaultApi~getInterAccountTransferFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InterAccountTransferFooters
     * Retrieve list of interaccounttransferfooters. For more information, see https://www.manager.io/guides?inter-account-transfer-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInterAccountTransferFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInterAccountTransferFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~getInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInterAccountTransferForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInterAccountTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInterAccountTransfers operation.
     * @callback module:api/DefaultApi~getInterAccountTransfersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inter Account Transfers
     * Retrieve list of inter account transfers. For more information, see https://www.manager.io/guides?inter-account-transfers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInterAccountTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInterAccountTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInternalPdfGeneratorForm operation.
     * @callback module:api/DefaultApi~getInternalPdfGeneratorFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInternalPdfGeneratorFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInternalPdfGeneratorForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInternalPdfGeneratorForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/internal-pdf-generator-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventmentForm operation.
     * @callback module:api/DefaultApi~getInventmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventmentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventmentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventment-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryAutomaticRevaluationForm operation.
     * @callback module:api/DefaultApi~getInventoryAutomaticRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryAutomaticRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryAutomaticRevaluationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryAutomaticRevaluationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-automatic-revaluation-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemForm operation.
     * @callback module:api/DefaultApi~getInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyOnHand operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyOnHandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyOnHand
     * Retrieve list of inventoryitemqtyonhand. For more information, see https://www.manager.io/guides?inventory-item-qty-on-hand
     * @param {Object} opts Optional parameters
     * @param {String} [inventoryItem] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyOnHandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyOnHand(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inventoryItem': opts['inventoryItem'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-on-hand', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyOnHandTransactions operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyOnHandTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyOnHandTransactions
     * Retrieve list of inventoryitemqtyonhandtransactions. For more information, see https://www.manager.io/guides?inventory-item-qty-on-hand-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [inventoryItem] 
     * @param {String} [inventoryLocation] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyOnHandTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyOnHandTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inventoryItem': opts['inventoryItem'],
        'inventoryLocation': opts['inventoryLocation'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-on-hand-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyOnOrder operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyOnOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyOnOrder
     * Retrieve list of inventoryitemqtyonorder. For more information, see https://www.manager.io/guides?inventory-item-qty-on-order
     * @param {Object} opts Optional parameters
     * @param {String} [inventoryItem] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyOnOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyOnOrder(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inventoryItem': opts['inventoryItem'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-on-order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyOnOrderTransactions operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyOnOrderTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyOnOrderTransactions
     * Retrieve list of inventoryitemqtyonordertransactions. For more information, see https://www.manager.io/guides?inventory-item-qty-on-order-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [inventoryItem] 
     * @param {String} [purchaseOrder] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyOnOrderTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyOnOrderTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inventoryItem': opts['inventoryItem'],
        'purchaseOrder': opts['purchaseOrder'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-on-order-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyOwned operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyOwnedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyOwned
     * Retrieve list of inventoryitemqtyowned. For more information, see https://www.manager.io/guides?inventory-item-qty-owned
     * @param {Object} opts Optional parameters
     * @param {String} [inventoryItem] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyOwnedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyOwned(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inventoryItem': opts['inventoryItem'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-owned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyReserved operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyReservedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyReserved
     * Retrieve list of inventoryitemqtyreserved. For more information, see https://www.manager.io/guides?inventory-item-qty-reserved
     * @param {Object} opts Optional parameters
     * @param {String} [inventoryItem] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyReservedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyReserved(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'inventoryItem': opts['inventoryItem'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-reserved', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyToDeliver operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyToDeliverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyToDeliver
     * Retrieve list of inventoryitemqtytodeliver. For more information, see https://www.manager.io/guides?inventory-item-qty-to-deliver
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyToDeliverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyToDeliver(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-to-deliver', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyToDeliverTransactions operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyToDeliverTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyToDeliverTransactions
     * Retrieve list of inventoryitemqtytodelivertransactions. For more information, see https://www.manager.io/guides?inventory-item-qty-to-deliver-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyToDeliverTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyToDeliverTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-to-deliver-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyToReceive operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyToReceiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyToReceive
     * Retrieve list of inventoryitemqtytoreceive. For more information, see https://www.manager.io/guides?inventory-item-qty-to-receive
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyToReceiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyToReceive(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-to-receive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemQtyToReceiveTransactions operation.
     * @callback module:api/DefaultApi~getInventoryItemQtyToReceiveTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemQtyToReceiveTransactions
     * Retrieve list of inventoryitemqtytoreceivetransactions. For more information, see https://www.manager.io/guides?inventory-item-qty-to-receive-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemQtyToReceiveTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemQtyToReceiveTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-qty-to-receive-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getInventoryItemStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryItemStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryItemStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItemStartingBalanceList operation.
     * @callback module:api/DefaultApi~getInventoryItemStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemStartingBalanceList
     * Retrieve list of inventoryitemstartingbalancelist. For more information, see https://www.manager.io/guides?inventory-item-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItemStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryItems operation.
     * @callback module:api/DefaultApi~getInventoryItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inventory Items
     * Retrieve list of inventory items. For more information, see https://www.manager.io/guides?inventory-items
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryKitForm operation.
     * @callback module:api/DefaultApi~getInventoryKitFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryKitFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryKitForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryKitForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-kit-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryKits operation.
     * @callback module:api/DefaultApi~getInventoryKitsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inventory Kits
     * Retrieve list of inventory kits. For more information, see https://www.manager.io/guides?inventory-kits
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryKitsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryKits(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-kits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryLocationForm operation.
     * @callback module:api/DefaultApi~getInventoryLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryLocationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryLocationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-location-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryLocations operation.
     * @callback module:api/DefaultApi~getInventoryLocationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inventory Locations
     * Retrieve list of inventory locations. For more information, see https://www.manager.io/guides?inventory-locations
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryLocations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryPriceListForm operation.
     * @callback module:api/DefaultApi~getInventoryPriceListFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryPriceListFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryPriceListForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryPriceListForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-price-list-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryPriceListView operation.
     * @callback module:api/DefaultApi~getInventoryPriceListViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryPriceListViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryPriceListView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryPriceListView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-price-list-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryProfitMarginForm operation.
     * @callback module:api/DefaultApi~getInventoryProfitMarginFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryProfitMarginFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryProfitMarginForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryProfitMarginForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-profit-margin-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryProfitMarginView operation.
     * @callback module:api/DefaultApi~getInventoryProfitMarginViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryProfitMarginViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryProfitMarginView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryProfitMarginView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-profit-margin-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryQuantityByLocationForm operation.
     * @callback module:api/DefaultApi~getInventoryQuantityByLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryQuantityByLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryQuantityByLocationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryQuantityByLocationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-by-location-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryQuantityByLocationList operation.
     * @callback module:api/DefaultApi~getInventoryQuantityByLocationListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryQuantityByLocationList
     * Retrieve list of inventoryquantitybylocationlist. For more information, see https://www.manager.io/guides?inventory-quantity-by-location-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryQuantityByLocationListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryQuantityByLocationList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-by-location-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryQuantityByLocationView operation.
     * @callback module:api/DefaultApi~getInventoryQuantityByLocationViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryQuantityByLocationViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryQuantityByLocationView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryQuantityByLocationView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-by-location-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryQuantitySummaryForm operation.
     * @callback module:api/DefaultApi~getInventoryQuantitySummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryQuantitySummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryQuantitySummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryQuantitySummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryQuantitySummaryView operation.
     * @callback module:api/DefaultApi~getInventoryQuantitySummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryQuantitySummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryQuantitySummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryQuantitySummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryRevaluationForm operation.
     * @callback module:api/DefaultApi~getInventoryRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryRevaluationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryRevaluationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-revaluation-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryRevaluations operation.
     * @callback module:api/DefaultApi~getInventoryRevaluationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inventory Revaluations
     * Retrieve list of inventory revaluations. For more information, see https://www.manager.io/guides?inventory-revaluations
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryRevaluationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryRevaluations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-revaluations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryTransferForm operation.
     * @callback module:api/DefaultApi~getInventoryTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryTransferForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-transfer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryTransferLines operation.
     * @callback module:api/DefaultApi~getInventoryTransferLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryTransferLines
     * Retrieve list of inventorytransferlines. For more information, see https://www.manager.io/guides?inventory-transfer-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryTransferLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryTransferLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-transfer-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryTransfers operation.
     * @callback module:api/DefaultApi~getInventoryTransfersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inventory Transfers
     * Retrieve list of inventory transfers. For more information, see https://www.manager.io/guides?inventory-transfers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryValueSummaryForm operation.
     * @callback module:api/DefaultApi~getInventoryValueSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryValueSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryValueSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryValueSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-value-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryValueSummaryView operation.
     * @callback module:api/DefaultApi~getInventoryValueSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryValueSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryValueSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryValueSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-value-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryWriteOffForm operation.
     * @callback module:api/DefaultApi~getInventoryWriteOffFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInventoryWriteOffFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryWriteOffForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInventoryWriteOffForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-write-off-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryWriteOffs operation.
     * @callback module:api/DefaultApi~getInventoryWriteOffsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inventory Write-offs
     * Retrieve list of inventory write-offs. For more information, see https://www.manager.io/guides?inventory-write-offs
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInventoryWriteOffsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInventoryWriteOffs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-write-offs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvestmentMarketPriceForm operation.
     * @callback module:api/DefaultApi~getInvestmentMarketPriceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInvestmentMarketPriceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInvestmentMarketPriceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInvestmentMarketPriceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-market-price-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvestmentMarketPrices operation.
     * @callback module:api/DefaultApi~getInvestmentMarketPricesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Investment Market Prices
     * Retrieve list of investment market prices. For more information, see https://www.manager.io/guides?investment-market-prices
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInvestmentMarketPricesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInvestmentMarketPrices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-market-prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvestmentStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getInvestmentStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getInvestmentStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInvestmentStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInvestmentStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvestmentStartingBalanceList operation.
     * @callback module:api/DefaultApi~getInvestmentStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InvestmentStartingBalanceList
     * Retrieve list of investmentstartingbalancelist. For more information, see https://www.manager.io/guides?investment-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInvestmentStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInvestmentStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvestmentTransactions operation.
     * @callback module:api/DefaultApi~getInvestmentTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InvestmentTransactions
     * Retrieve list of investmenttransactions. For more information, see https://www.manager.io/guides?investment-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInvestmentTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInvestmentTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvestments operation.
     * @callback module:api/DefaultApi~getInvestmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Investments
     * Retrieve list of investments. For more information, see https://www.manager.io/guides?investments
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getInvestmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInvestments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/investments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalEntries operation.
     * @callback module:api/DefaultApi~getJournalEntriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Journal Entries
     * Retrieve list of journal entries. For more information, see https://www.manager.io/guides?journal-entries
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getJournalEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJournalEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalEntryFooterForm operation.
     * @callback module:api/DefaultApi~getJournalEntryFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getJournalEntryFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJournalEntryFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getJournalEntryFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalEntryFooters operation.
     * @callback module:api/DefaultApi~getJournalEntryFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JournalEntryFooters
     * Retrieve list of journalentryfooters. For more information, see https://www.manager.io/guides?journal-entry-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getJournalEntryFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJournalEntryFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalEntryForm operation.
     * @callback module:api/DefaultApi~getJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJournalEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getJournalEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournalEntryLines operation.
     * @callback module:api/DefaultApi~getJournalEntryLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JournalEntryLines
     * Retrieve list of journalentrylines. For more information, see https://www.manager.io/guides?journal-entry-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getJournalEntryLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getJournalEntryLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatePaymentFeeForm operation.
     * @callback module:api/DefaultApi~getLatePaymentFeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getLatePaymentFeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLatePaymentFeeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLatePaymentFeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/late-payment-fee-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatePaymentFees operation.
     * @callback module:api/DefaultApi~getLatePaymentFeesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Late payment fees
     * Retrieve list of late payment fees. For more information, see https://www.manager.io/guides?late-payment-fees
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getLatePaymentFeesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLatePaymentFees(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/late-payment-fees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLockDateForm operation.
     * @callback module:api/DefaultApi~getLockDateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getLockDateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLockDateForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLockDateForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lock-date-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleValueCustomFieldForm operation.
     * @callback module:api/DefaultApi~getMultipleValueCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getMultipleValueCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMultipleValueCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMultipleValueCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/multiple-value-custom-field-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleValueCustomFields operation.
     * @callback module:api/DefaultApi~getMultipleValueCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Multiple Value Custom Fields
     * Retrieve list of multiple value custom fields. For more information, see https://www.manager.io/guides?multiple-value-custom-fields
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getMultipleValueCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMultipleValueCustomFields(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/multiple-value-custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewInterAccountTransfers operation.
     * @callback module:api/DefaultApi~getNewInterAccountTransfersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NewInterAccountTransfers
     * Retrieve list of newinteraccounttransfers. For more information, see https://www.manager.io/guides?new-inter-account-transfers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getNewInterAccountTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNewInterAccountTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/new-inter-account-transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~getNewSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NewSalesInvoiceForm
     * Retrieve list of newsalesinvoiceform. For more information, see https://www.manager.io/guides?new-sales-invoice-form
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getNewSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNewSalesInvoiceForm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/new-sales-invoice-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNonInventoryItemForm operation.
     * @callback module:api/DefaultApi~getNonInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getNonInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNonInventoryItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNonInventoryItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/non-inventory-item-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNonInventoryItems operation.
     * @callback module:api/DefaultApi~getNonInventoryItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Non-inventory Items
     * Retrieve list of non-inventory items. For more information, see https://www.manager.io/guides?non-inventory-items
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getNonInventoryItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNonInventoryItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/non-inventory-items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNumberCustomFieldForm operation.
     * @callback module:api/DefaultApi~getNumberCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getNumberCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNumberCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNumberCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/number-custom-field-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNumberCustomFields operation.
     * @callback module:api/DefaultApi~getNumberCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Custom Fields
     * Retrieve list of number custom fields. For more information, see https://www.manager.io/guides?number-custom-fields
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getNumberCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNumberCustomFields(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/number-custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentFooterForm operation.
     * @callback module:api/DefaultApi~getPaymentFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPaymentFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPaymentFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentFooters operation.
     * @callback module:api/DefaultApi~getPaymentFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PaymentFooters
     * Retrieve list of paymentfooters. For more information, see https://www.manager.io/guides?payment-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPaymentFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentForm operation.
     * @callback module:api/DefaultApi~getPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentLines operation.
     * @callback module:api/DefaultApi~getPaymentLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PaymentLines
     * Retrieve list of paymentlines. For more information, see https://www.manager.io/guides?payment-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPaymentLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentRuleForm operation.
     * @callback module:api/DefaultApi~getPaymentRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPaymentRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentRuleForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPaymentRuleForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-rule-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentRules operation.
     * @callback module:api/DefaultApi~getPaymentRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Payment Rules
     * Retrieve list of payment rules. For more information, see https://www.manager.io/guides?payment-rules
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPaymentRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPaymentRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayments operation.
     * @callback module:api/DefaultApi~getPaymentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Payments
     * Retrieve list of payments. For more information, see https://www.manager.io/guides?payments
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipContributionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~getPayslipContributionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipContributionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipContributionItemReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipContributionItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-contribution-item-reporting-category-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipDeductionItemForm operation.
     * @callback module:api/DefaultApi~getPayslipDeductionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipDeductionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipDeductionItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipDeductionItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipDeductionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~getPayslipDeductionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipDeductionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipDeductionItemReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipDeductionItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-reporting-category-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipEarningsItemForm operation.
     * @callback module:api/DefaultApi~getPayslipEarningsItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipEarningsItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipEarningsItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipEarningsItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipEarningsItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~getPayslipEarningsItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipEarningsItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipEarningsItemReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipEarningsItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-reporting-category-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipEmployerContributionItemForm operation.
     * @callback module:api/DefaultApi~getPayslipEmployerContributionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipEmployerContributionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipEmployerContributionItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipEmployerContributionItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-employer-contribution-item-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipFooterForm operation.
     * @callback module:api/DefaultApi~getPayslipFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipFooters operation.
     * @callback module:api/DefaultApi~getPayslipFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipFooters
     * Retrieve list of payslipfooters. For more information, see https://www.manager.io/guides?payslip-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPayslipFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipForm operation.
     * @callback module:api/DefaultApi~getPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipSummaryForm operation.
     * @callback module:api/DefaultApi~getPayslipSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipSummaryView operation.
     * @callback module:api/DefaultApi~getPayslipSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipTotalsPerItemAndEmployeeForm operation.
     * @callback module:api/DefaultApi~getPayslipTotalsPerItemAndEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipTotalsPerItemAndEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipTotalsPerItemAndEmployeeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipTotalsPerItemAndEmployeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-totals-per-item-and-employee-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslipTotalsPerItemAndEmployeeView operation.
     * @callback module:api/DefaultApi~getPayslipTotalsPerItemAndEmployeeViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPayslipTotalsPerItemAndEmployeeViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslipTotalsPerItemAndEmployeeView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPayslipTotalsPerItemAndEmployeeView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-totals-per-item-and-employee-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslips operation.
     * @callback module:api/DefaultApi~getPayslipsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Payslips
     * Retrieve list of payslips. For more information, see https://www.manager.io/guides?payslips
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPayslipsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPayslips(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingEarlyPaymentDiscounts operation.
     * @callback module:api/DefaultApi~getPendingEarlyPaymentDiscountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingEarlyPaymentDiscounts
     * Retrieve list of pendingearlypaymentdiscounts. For more information, see https://www.manager.io/guides?pending-early-payment-discounts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingEarlyPaymentDiscountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingEarlyPaymentDiscounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-early-payment-discounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingInterAccountTransfers operation.
     * @callback module:api/DefaultApi~getPendingInterAccountTransfersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingInterAccountTransfers
     * Retrieve list of pendinginteraccounttransfers. For more information, see https://www.manager.io/guides?pending-inter-account-transfers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingInterAccountTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingInterAccountTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-inter-account-transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingLatePaymentFees operation.
     * @callback module:api/DefaultApi~getPendingLatePaymentFeesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingLatePaymentFees
     * Retrieve list of pendinglatepaymentfees. For more information, see https://www.manager.io/guides?pending-late-payment-fees
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingLatePaymentFeesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingLatePaymentFees(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-late-payment-fees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingPayments operation.
     * @callback module:api/DefaultApi~getPendingPaymentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingPayments
     * Retrieve list of pendingpayments. For more information, see https://www.manager.io/guides?pending-payments
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingPayments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingPurchaseOrders operation.
     * @callback module:api/DefaultApi~getPendingPurchaseOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingPurchaseOrders
     * Retrieve list of pendingpurchaseorders. For more information, see https://www.manager.io/guides?pending-purchase-orders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingPurchaseOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingPurchaseOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-purchase-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingReceipts operation.
     * @callback module:api/DefaultApi~getPendingReceiptsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingReceipts
     * Retrieve list of pendingreceipts. For more information, see https://www.manager.io/guides?pending-receipts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingReceipts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingRecurringJournalEntries operation.
     * @callback module:api/DefaultApi~getPendingRecurringJournalEntriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingRecurringJournalEntries
     * Retrieve list of pendingrecurringjournalentries. For more information, see https://www.manager.io/guides?pending-recurring-journal-entries
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingRecurringJournalEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingRecurringJournalEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-recurring-journal-entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingRecurringPayslips operation.
     * @callback module:api/DefaultApi~getPendingRecurringPayslipsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingRecurringPayslips
     * Retrieve list of pendingrecurringpayslips. For more information, see https://www.manager.io/guides?pending-recurring-payslips
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingRecurringPayslipsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingRecurringPayslips(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-recurring-payslips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingRecurringPurchaseInvoices operation.
     * @callback module:api/DefaultApi~getPendingRecurringPurchaseInvoicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingRecurringPurchaseInvoices
     * Retrieve list of pendingrecurringpurchaseinvoices. For more information, see https://www.manager.io/guides?pending-recurring-purchase-invoices
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingRecurringPurchaseInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingRecurringPurchaseInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-recurring-purchase-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingRecurringSalesInvoices operation.
     * @callback module:api/DefaultApi~getPendingRecurringSalesInvoicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingRecurringSalesInvoices
     * Retrieve list of pendingrecurringsalesinvoices. For more information, see https://www.manager.io/guides?pending-recurring-sales-invoices
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingRecurringSalesInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingRecurringSalesInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-recurring-sales-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingSalesOrders operation.
     * @callback module:api/DefaultApi~getPendingSalesOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingSalesOrders
     * Retrieve list of pendingsalesorders. For more information, see https://www.manager.io/guides?pending-sales-orders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingSalesOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingSalesOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-sales-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingSalesQuotes operation.
     * @callback module:api/DefaultApi~getPendingSalesQuotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PendingSalesQuotes
     * Retrieve list of pendingsalesquotes. For more information, see https://www.manager.io/guides?pending-sales-quotes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPendingSalesQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPendingSalesQuotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pending-sales-quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductionOrderForm operation.
     * @callback module:api/DefaultApi~getProductionOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProductionOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductionOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProductionOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/production-order-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductionOrders operation.
     * @callback module:api/DefaultApi~getProductionOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Production Orders
     * Retrieve list of production orders. For more information, see https://www.manager.io/guides?production-orders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getProductionOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductionOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/production-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountBillableExpensesCostForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountBillableExpensesCostFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountBillableExpensesCostFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountBillableExpensesCostForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountBillableExpensesCostForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-cost-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountBillableExpensesInvoicedForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountBillableExpensesInvoicedForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountBillableExpensesInvoicedForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-invoiced-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountBillableTimeInvoicedForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountBillableTimeInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountBillableTimeInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountBillableTimeInvoicedForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountBillableTimeInvoicedForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-invoiced-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountBillableTimeMovementForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountBillableTimeMovementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountBillableTimeMovementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountBillableTimeMovementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountBillableTimeMovementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-movement-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-capital-gains-on-investments-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountCurrencyGainsLossesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountCurrencyGainsLossesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-currency-gains-losses-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountFixedAssetDepreciationForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountFixedAssetDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountFixedAssetDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountFixedAssetDepreciationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountFixedAssetDepreciationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-depreciation-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountFixedAssetLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountFixedAssetLossOnDisposalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountFixedAssetLossOnDisposalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-loss-on-disposal-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountIntangibleAssetsAmortizationForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountIntangibleAssetsAmortizationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountIntangibleAssetsAmortizationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-amortization-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-gains-loss-on-disposal-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountInventoryPurchasesForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountInventoryPurchasesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountInventoryPurchasesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountInventoryPurchasesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountInventoryPurchasesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-purchases-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountInventorySalesForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountInventorySalesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountInventorySalesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountInventorySalesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountInventorySalesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-sales-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountLatePaymentFeesForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountLatePaymentFeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountLatePaymentFeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountLatePaymentFeesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountLatePaymentFeesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-late-payment-fees-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementAccountRoundingExpenseForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementAccountRoundingExpenseFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementAccountRoundingExpenseFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementAccountRoundingExpenseForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementAccountRoundingExpenseForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-rounding-expense-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementActualVsBudgetForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementActualVsBudgetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementActualVsBudgetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementActualVsBudgetForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementActualVsBudgetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-actual-vs-budget-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementActualVsBudgetTransactions operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementActualVsBudgetTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementActualVsBudgetTransactions
     * Retrieve list of profitandlossstatementactualvsbudgettransactions. For more information, see https://www.manager.io/guides?profit-and-loss-statement-actual-vs-budget-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getProfitAndLossStatementActualVsBudgetTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementActualVsBudgetTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-actual-vs-budget-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementActualVsBudgetView operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementActualVsBudgetViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementActualVsBudgetViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementActualVsBudgetView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementActualVsBudgetView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-actual-vs-budget-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementGroupForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementGroupForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-group-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementSubtotalForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementSubtotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementSubtotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementSubtotalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementSubtotalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-subtotal-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementTotalForm operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementTotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementTotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementTotalForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementTotalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-total-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementTransactions operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementTransactions
     * Retrieve list of profitandlossstatementtransactions. For more information, see https://www.manager.io/guides?profit-and-loss-statement-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getProfitAndLossStatementTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfitAndLossStatementView operation.
     * @callback module:api/DefaultApi~getProfitAndLossStatementViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProfitAndLossStatementViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProfitAndLossStatementView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProfitAndLossStatementView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectForm operation.
     * @callback module:api/DefaultApi~getProjectFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProjectFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProjectForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectPurchaseOrders operation.
     * @callback module:api/DefaultApi~getProjectPurchaseOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProjectPurchaseOrders
     * Retrieve list of projectpurchaseorders. For more information, see https://www.manager.io/guides?project-purchase-orders
     * @param {Object} opts Optional parameters
     * @param {String} [project] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getProjectPurchaseOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectPurchaseOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'project': opts['project'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-purchase-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectReportView operation.
     * @callback module:api/DefaultApi~getProjectReportViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getProjectReportViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectReportView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getProjectReportView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-report-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/DefaultApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projects
     * Retrieve list of projects. For more information, see https://www.manager.io/guides?projects
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~getPurchaseInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPurchaseInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseInvoiceFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPurchaseInvoiceFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseInvoiceFooters operation.
     * @callback module:api/DefaultApi~getPurchaseInvoiceFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseInvoiceFooters
     * Retrieve list of purchaseinvoicefooters. For more information, see https://www.manager.io/guides?purchase-invoice-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseInvoiceFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseInvoiceFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~getPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseInvoiceLines operation.
     * @callback module:api/DefaultApi~getPurchaseInvoiceLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseInvoiceLines
     * Retrieve list of purchaseinvoicelines. For more information, see https://www.manager.io/guides?purchase-invoice-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseInvoiceLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseInvoiceLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getPurchaseInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPurchaseInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseInvoiceStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPurchaseInvoiceStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseInvoiceStartingBalanceList operation.
     * @callback module:api/DefaultApi~getPurchaseInvoiceStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseInvoiceStartingBalanceList
     * Retrieve list of purchaseinvoicestartingbalancelist. For more information, see https://www.manager.io/guides?purchase-invoice-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseInvoiceStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseInvoiceStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseInvoices operation.
     * @callback module:api/DefaultApi~getPurchaseInvoicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Invoices
     * Retrieve list of purchase invoices. For more information, see https://www.manager.io/guides?purchase-invoices
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderFooterForm operation.
     * @callback module:api/DefaultApi~getPurchaseOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPurchaseOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrderFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPurchaseOrderFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderFooters operation.
     * @callback module:api/DefaultApi~getPurchaseOrderFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseOrderFooters
     * Retrieve list of purchaseorderfooters. For more information, see https://www.manager.io/guides?purchase-order-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseOrderFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrderFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~getPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderLines operation.
     * @callback module:api/DefaultApi~getPurchaseOrderLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseOrderLines
     * Retrieve list of purchaseorderlines. For more information, see https://www.manager.io/guides?purchase-order-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseOrderLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrderLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderQtyDeliveredTransactions operation.
     * @callback module:api/DefaultApi~getPurchaseOrderQtyDeliveredTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseOrderQtyDeliveredTransactions
     * Retrieve list of purchaseorderqtydeliveredtransactions. For more information, see https://www.manager.io/guides?purchase-order-qty-delivered-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseOrderQtyDeliveredTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrderQtyDeliveredTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-qty-delivered-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderQtyInvoicedTransactions operation.
     * @callback module:api/DefaultApi~getPurchaseOrderQtyInvoicedTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseOrderQtyInvoicedTransactions
     * Retrieve list of purchaseorderqtyinvoicedtransactions. For more information, see https://www.manager.io/guides?purchase-order-qty-invoiced-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseOrderQtyInvoicedTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrderQtyInvoicedTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-qty-invoiced-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderQtyOnOrder operation.
     * @callback module:api/DefaultApi~getPurchaseOrderQtyOnOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseOrderQtyOnOrder
     * Retrieve list of purchaseorderqtyonorder. For more information, see https://www.manager.io/guides?purchase-order-qty-on-order
     * @param {Object} opts Optional parameters
     * @param {String} [purchaseOrder] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseOrderQtyOnOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrderQtyOnOrder(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'purchaseOrder': opts['purchaseOrder'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-qty-on-order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrders operation.
     * @callback module:api/DefaultApi~getPurchaseOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Orders
     * Retrieve list of purchase orders. For more information, see https://www.manager.io/guides?purchase-orders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseQuoteFooterForm operation.
     * @callback module:api/DefaultApi~getPurchaseQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPurchaseQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseQuoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPurchaseQuoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseQuoteFooters operation.
     * @callback module:api/DefaultApi~getPurchaseQuoteFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseQuoteFooters
     * Retrieve list of purchasequotefooters. For more information, see https://www.manager.io/guides?purchase-quote-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseQuoteFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseQuoteFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~getPurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getPurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getPurchaseQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseQuoteLines operation.
     * @callback module:api/DefaultApi~getPurchaseQuoteLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseQuoteLines
     * Retrieve list of purchasequotelines. For more information, see https://www.manager.io/guides?purchase-quote-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseQuoteLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseQuoteLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseQuotes operation.
     * @callback module:api/DefaultApi~getPurchaseQuotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Quotes
     * Retrieve list of purchase quotes. For more information, see https://www.manager.io/guides?purchase-quotes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getPurchaseQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPurchaseQuotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealizedCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~getRealizedCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRealizedCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRealizedCurrencyGainsLossesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRealizedCurrencyGainsLossesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-currency-gains-losses-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealizedCurrencyGainsLossesView operation.
     * @callback module:api/DefaultApi~getRealizedCurrencyGainsLossesViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRealizedCurrencyGainsLossesViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRealizedCurrencyGainsLossesView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRealizedCurrencyGainsLossesView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-currency-gains-losses-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealizedInvestmentGainsSummaryForm operation.
     * @callback module:api/DefaultApi~getRealizedInvestmentGainsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRealizedInvestmentGainsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRealizedInvestmentGainsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRealizedInvestmentGainsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-investment-gains-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealizedInvestmentGainsSummaryList operation.
     * @callback module:api/DefaultApi~getRealizedInvestmentGainsSummaryListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RealizedInvestmentGainsSummaryList
     * Retrieve list of realizedinvestmentgainssummarylist. For more information, see https://www.manager.io/guides?realized-investment-gains-summary-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRealizedInvestmentGainsSummaryListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRealizedInvestmentGainsSummaryList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-investment-gains-summary-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealizedInvestmentGainsSummaryView operation.
     * @callback module:api/DefaultApi~getRealizedInvestmentGainsSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRealizedInvestmentGainsSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRealizedInvestmentGainsSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRealizedInvestmentGainsSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-investment-gains-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecalculateAverageCost operation.
     * @callback module:api/DefaultApi~getRecalculateAverageCostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecalculateAverageCost
     * Retrieve list of recalculateaveragecost. For more information, see https://www.manager.io/guides?recalculate-average-cost
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecalculateAverageCostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecalculateAverageCost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recalculate-average-cost', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptFooterForm operation.
     * @callback module:api/DefaultApi~getReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReceiptFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptFooters operation.
     * @callback module:api/DefaultApi~getReceiptFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReceiptFooters
     * Retrieve list of receiptfooters. For more information, see https://www.manager.io/guides?receipt-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getReceiptFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptForm operation.
     * @callback module:api/DefaultApi~getReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptLines operation.
     * @callback module:api/DefaultApi~getReceiptLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReceiptLines
     * Retrieve list of receiptlines. For more information, see https://www.manager.io/guides?receipt-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getReceiptLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptRuleForm operation.
     * @callback module:api/DefaultApi~getReceiptRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReceiptRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptRuleForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReceiptRuleForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-rule-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptRules operation.
     * @callback module:api/DefaultApi~getReceiptRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receipt Rules
     * Retrieve list of receipt rules. For more information, see https://www.manager.io/guides?receipt-rules
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getReceiptRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceipts operation.
     * @callback module:api/DefaultApi~getReceiptsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receipts
     * Retrieve list of receipts. For more information, see https://www.manager.io/guides?receipts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceipts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptsAndPaymentsSummaryForm operation.
     * @callback module:api/DefaultApi~getReceiptsAndPaymentsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReceiptsAndPaymentsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptsAndPaymentsSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReceiptsAndPaymentsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipts-and-payments-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptsAndPaymentsSummaryView operation.
     * @callback module:api/DefaultApi~getReceiptsAndPaymentsSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReceiptsAndPaymentsSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReceiptsAndPaymentsSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReceiptsAndPaymentsSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipts-and-payments-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~getRecurringInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringInterAccountTransferForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringInterAccountTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-inter-account-transfer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringInterAccountTransfers operation.
     * @callback module:api/DefaultApi~getRecurringInterAccountTransfersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Inter Account Transfers
     * Retrieve list of recurring inter account transfers. For more information, see https://www.manager.io/guides?recurring-inter-account-transfers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringInterAccountTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringInterAccountTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-inter-account-transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringJournalEntries operation.
     * @callback module:api/DefaultApi~getRecurringJournalEntriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Journal Entries
     * Retrieve list of recurring journal entries. For more information, see https://www.manager.io/guides?recurring-journal-entries
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringJournalEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringJournalEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-journal-entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringJournalEntryForm operation.
     * @callback module:api/DefaultApi~getRecurringJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringJournalEntryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringJournalEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-journal-entry-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPaymentForm operation.
     * @callback module:api/DefaultApi~getRecurringPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPaymentForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payment-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPayments operation.
     * @callback module:api/DefaultApi~getRecurringPaymentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Payments
     * Retrieve list of recurring payments. For more information, see https://www.manager.io/guides?recurring-payments
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPayments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPayslipForm operation.
     * @callback module:api/DefaultApi~getRecurringPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPayslipForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payslip-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPayslips operation.
     * @callback module:api/DefaultApi~getRecurringPayslipsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Payslips
     * Retrieve list of recurring payslips. For more information, see https://www.manager.io/guides?recurring-payslips
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringPayslipsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPayslips(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payslips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~getRecurringPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPurchaseInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-invoice-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPurchaseInvoices operation.
     * @callback module:api/DefaultApi~getRecurringPurchaseInvoicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Purchase Invoices
     * Retrieve list of recurring purchase invoices. For more information, see https://www.manager.io/guides?recurring-purchase-invoices
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringPurchaseInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPurchaseInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~getRecurringPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPurchaseOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-order-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPurchaseOrders operation.
     * @callback module:api/DefaultApi~getRecurringPurchaseOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Purchase Orders
     * Retrieve list of recurring purchase orders. For more information, see https://www.manager.io/guides?recurring-purchase-orders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringPurchaseOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringPurchaseOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringReceiptForm operation.
     * @callback module:api/DefaultApi~getRecurringReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-receipt-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringReceipts operation.
     * @callback module:api/DefaultApi~getRecurringReceiptsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Receipts
     * Retrieve list of recurring receipts. For more information, see https://www.manager.io/guides?recurring-receipts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringReceipts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~getRecurringSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringSalesInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-invoice-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringSalesInvoices operation.
     * @callback module:api/DefaultApi~getRecurringSalesInvoicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Sales Invoices
     * Retrieve list of recurring sales invoices. For more information, see https://www.manager.io/guides?recurring-sales-invoices
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringSalesInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringSalesInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringSalesOrderForm operation.
     * @callback module:api/DefaultApi~getRecurringSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringSalesOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-order-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringSalesOrders operation.
     * @callback module:api/DefaultApi~getRecurringSalesOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Sales Orders
     * Retrieve list of recurring sales orders. For more information, see https://www.manager.io/guides?recurring-sales-orders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringSalesOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringSalesOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringSalesQuoteForm operation.
     * @callback module:api/DefaultApi~getRecurringSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getRecurringSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringSalesQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRecurringSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-quote-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringSalesQuotes operation.
     * @callback module:api/DefaultApi~getRecurringSalesQuotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recurring Sales Quotes
     * Retrieve list of recurring sales quotes. For more information, see https://www.manager.io/guides?recurring-sales-quotes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getRecurringSalesQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurringSalesQuotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportTransformationForm operation.
     * @callback module:api/DefaultApi~getReportTransformationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReportTransformationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReportTransformationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReportTransformationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportTransformationLabelForm operation.
     * @callback module:api/DefaultApi~getReportTransformationLabelFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReportTransformationLabelFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReportTransformationLabelForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReportTransformationLabelForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-label-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportTransformationReportForm operation.
     * @callback module:api/DefaultApi~getReportTransformationReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getReportTransformationReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReportTransformationReportForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getReportTransformationReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-report-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~getSalesInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceFooters operation.
     * @callback module:api/DefaultApi~getSalesInvoiceFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceFooters
     * Retrieve list of salesinvoicefooters. For more information, see https://www.manager.io/guides?sales-invoice-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesInvoiceFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~getSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceLines operation.
     * @callback module:api/DefaultApi~getSalesInvoiceLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceLines
     * Retrieve list of salesinvoicelines. For more information, see https://www.manager.io/guides?sales-invoice-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesInvoiceLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getSalesInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceStartingBalanceList operation.
     * @callback module:api/DefaultApi~getSalesInvoiceStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceStartingBalanceList
     * Retrieve list of salesinvoicestartingbalancelist. For more information, see https://www.manager.io/guides?sales-invoice-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesInvoiceStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceTotalsByCustomFieldForm operation.
     * @callback module:api/DefaultApi~getSalesInvoiceTotalsByCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceTotalsByCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceTotalsByCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceTotalsByCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-custom-field-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceTotalsByCustomFieldView operation.
     * @callback module:api/DefaultApi~getSalesInvoiceTotalsByCustomFieldViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceTotalsByCustomFieldViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceTotalsByCustomFieldView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceTotalsByCustomFieldView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-custom-field-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceTotalsByCustomerForm operation.
     * @callback module:api/DefaultApi~getSalesInvoiceTotalsByCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceTotalsByCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceTotalsByCustomerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceTotalsByCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-customer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceTotalsByCustomerView operation.
     * @callback module:api/DefaultApi~getSalesInvoiceTotalsByCustomerViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceTotalsByCustomerViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceTotalsByCustomerView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceTotalsByCustomerView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-customer-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceTotalsByItemForm operation.
     * @callback module:api/DefaultApi~getSalesInvoiceTotalsByItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceTotalsByItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceTotalsByItemForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceTotalsByItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-item-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoiceTotalsByItemView operation.
     * @callback module:api/DefaultApi~getSalesInvoiceTotalsByItemViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesInvoiceTotalsByItemViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoiceTotalsByItemView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesInvoiceTotalsByItemView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-item-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInvoices operation.
     * @callback module:api/DefaultApi~getSalesInvoicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sales Invoices
     * Retrieve list of sales invoices. For more information, see https://www.manager.io/guides?sales-invoices
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrderFooterForm operation.
     * @callback module:api/DefaultApi~getSalesOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrderFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesOrderFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrderFooters operation.
     * @callback module:api/DefaultApi~getSalesOrderFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesOrderFooters
     * Retrieve list of salesorderfooters. For more information, see https://www.manager.io/guides?sales-order-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesOrderFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrderFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrderForm operation.
     * @callback module:api/DefaultApi~getSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrderForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrderLines operation.
     * @callback module:api/DefaultApi~getSalesOrderLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesOrderLines
     * Retrieve list of salesorderlines. For more information, see https://www.manager.io/guides?sales-order-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesOrderLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrderLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrderQtyDeliveredTransactions operation.
     * @callback module:api/DefaultApi~getSalesOrderQtyDeliveredTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesOrderQtyDeliveredTransactions
     * Retrieve list of salesorderqtydeliveredtransactions. For more information, see https://www.manager.io/guides?sales-order-qty-delivered-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesOrderQtyDeliveredTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrderQtyDeliveredTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-qty-delivered-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrderQtyInvoicedTransactions operation.
     * @callback module:api/DefaultApi~getSalesOrderQtyInvoicedTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesOrderQtyInvoicedTransactions
     * Retrieve list of salesorderqtyinvoicedtransactions. For more information, see https://www.manager.io/guides?sales-order-qty-invoiced-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesOrderQtyInvoicedTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrderQtyInvoicedTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-qty-invoiced-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrderQtyReserved operation.
     * @callback module:api/DefaultApi~getSalesOrderQtyReservedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesOrderQtyReserved
     * Retrieve list of salesorderqtyreserved. For more information, see https://www.manager.io/guides?sales-order-qty-reserved
     * @param {Object} opts Optional parameters
     * @param {String} [salesOrder] 
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesOrderQtyReservedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrderQtyReserved(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'salesOrder': opts['salesOrder'],
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-qty-reserved', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesOrders operation.
     * @callback module:api/DefaultApi~getSalesOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sales Orders
     * Retrieve list of sales orders. For more information, see https://www.manager.io/guides?sales-orders
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesQuoteFooterForm operation.
     * @callback module:api/DefaultApi~getSalesQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesQuoteFooterForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesQuoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-footer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesQuoteFooters operation.
     * @callback module:api/DefaultApi~getSalesQuoteFootersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesQuoteFooters
     * Retrieve list of salesquotefooters. For more information, see https://www.manager.io/guides?sales-quote-footers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesQuoteFootersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesQuoteFooters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-footers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesQuoteForm operation.
     * @callback module:api/DefaultApi~getSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesQuoteForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesQuoteLines operation.
     * @callback module:api/DefaultApi~getSalesQuoteLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesQuoteLines
     * Retrieve list of salesquotelines. For more information, see https://www.manager.io/guides?sales-quote-lines
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesQuoteLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesQuoteLines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesQuotes operation.
     * @callback module:api/DefaultApi~getSalesQuotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sales Quotes
     * Retrieve list of sales quotes. For more information, see https://www.manager.io/guides?sales-quotes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSalesQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSalesQuotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecialAccountForm operation.
     * @callback module:api/DefaultApi~getSpecialAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSpecialAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSpecialAccountForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSpecialAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecialAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~getSpecialAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSpecialAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSpecialAccountStartingBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSpecialAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-starting-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecialAccountStartingBalanceList operation.
     * @callback module:api/DefaultApi~getSpecialAccountStartingBalanceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SpecialAccountStartingBalanceList
     * Retrieve list of specialaccountstartingbalancelist. For more information, see https://www.manager.io/guides?special-account-starting-balance-list
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSpecialAccountStartingBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSpecialAccountStartingBalanceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-starting-balance-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecialAccounts operation.
     * @callback module:api/DefaultApi~getSpecialAccountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Special Accounts
     * Retrieve list of special accounts. For more information, see https://www.manager.io/guides?special-accounts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSpecialAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSpecialAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatementOfChangesInEquityForm operation.
     * @callback module:api/DefaultApi~getStatementOfChangesInEquityFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getStatementOfChangesInEquityFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStatementOfChangesInEquityForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStatementOfChangesInEquityForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/statement-of-changes-in-equity-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatementOfChangesInEquityView operation.
     * @callback module:api/DefaultApi~getStatementOfChangesInEquityViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getStatementOfChangesInEquityViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStatementOfChangesInEquityView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStatementOfChangesInEquityView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/statement-of-changes-in-equity-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSummaryForm operation.
     * @callback module:api/DefaultApi~getSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSummaryTransactions operation.
     * @callback module:api/DefaultApi~getSummaryTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SummaryTransactions
     * Retrieve list of summarytransactions. For more information, see https://www.manager.io/guides?summary-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSummaryTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSummaryTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/summary-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupplierForm operation.
     * @callback module:api/DefaultApi~getSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSupplierForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSupplierForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupplierStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~getSupplierStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSupplierStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSupplierStatementsTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSupplierStatementsTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-transactions-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupplierStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~getSupplierStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSupplierStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSupplierStatementsUnpaidInvoicesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSupplierStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-unpaid-invoices-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupplierSummaryForm operation.
     * @callback module:api/DefaultApi~getSupplierSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSupplierSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSupplierSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSupplierSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupplierSummaryView operation.
     * @callback module:api/DefaultApi~getSupplierSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getSupplierSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSupplierSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSupplierSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuppliers operation.
     * @callback module:api/DefaultApi~getSuppliersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suppliers
     * Retrieve list of suppliers. For more information, see https://www.manager.io/guides?suppliers
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSuppliersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSuppliers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/suppliers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuppliersQtyToReceive operation.
     * @callback module:api/DefaultApi~getSuppliersQtyToReceiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SuppliersQtyToReceive
     * Retrieve list of suppliersqtytoreceive. For more information, see https://www.manager.io/guides?suppliers-qty-to-receive
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getSuppliersQtyToReceiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSuppliersQtyToReceive(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/suppliers-qty-to-receive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTabsForm operation.
     * @callback module:api/DefaultApi~getTabsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTabsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTabsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTabsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tabs-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxAmountReportingCategoryForm operation.
     * @callback module:api/DefaultApi~getTaxAmountReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxAmountReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxAmountReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxAmountReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reporting-category-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxAmountReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~getTaxAmountReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxAmountReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxAmountReversedReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxAmountReversedReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reversed-reporting-category-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxAuditForm operation.
     * @callback module:api/DefaultApi~getTaxAuditFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxAuditFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxAuditForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxAuditForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-audit-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxAuditView operation.
     * @callback module:api/DefaultApi~getTaxAuditViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxAuditViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxAuditView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxAuditView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-audit-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxCodeForm operation.
     * @callback module:api/DefaultApi~getTaxCodeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxCodeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxCodeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxCodeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxCodeReportingCategoryForm operation.
     * @callback module:api/DefaultApi~getTaxCodeReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxCodeReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxCodeReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxCodeReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reporting-category-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxCodeReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~getTaxCodeReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxCodeReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxCodeReversedReportingCategoryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxCodeReversedReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reversed-reporting-category-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxCodes operation.
     * @callback module:api/DefaultApi~getTaxCodesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tax Codes
     * Retrieve list of tax codes. For more information, see https://www.manager.io/guides?tax-codes
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getTaxCodesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxCodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxReconciliationForm operation.
     * @callback module:api/DefaultApi~getTaxReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxReconciliationForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxReconciliationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-reconciliation-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxReconciliationView operation.
     * @callback module:api/DefaultApi~getTaxReconciliationViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxReconciliationViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxReconciliationView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxReconciliationView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-reconciliation-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxSummaryForm operation.
     * @callback module:api/DefaultApi~getTaxSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxSummaryForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-summary-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxSummaryTransactions operation.
     * @callback module:api/DefaultApi~getTaxSummaryTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxSummaryTransactions
     * Retrieve list of taxsummarytransactions. For more information, see https://www.manager.io/guides?tax-summary-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getTaxSummaryTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxSummaryTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-summary-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxSummaryView operation.
     * @callback module:api/DefaultApi~getTaxSummaryViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxSummaryViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxSummaryView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxSummaryView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-summary-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxTransactionsForm operation.
     * @callback module:api/DefaultApi~getTaxTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxTransactionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-transactions-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxTransactionsView operation.
     * @callback module:api/DefaultApi~getTaxTransactionsViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxTransactionsViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxTransactionsView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxTransactionsView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-transactions-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxablePurchasesPerSupplierForm operation.
     * @callback module:api/DefaultApi~getTaxablePurchasesPerSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxablePurchasesPerSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxablePurchasesPerSupplierForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxablePurchasesPerSupplierForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-purchases-per-supplier-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxablePurchasesPerSupplierView operation.
     * @callback module:api/DefaultApi~getTaxablePurchasesPerSupplierViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxablePurchasesPerSupplierViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxablePurchasesPerSupplierView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxablePurchasesPerSupplierView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-purchases-per-supplier-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxableSalesPerCustomerForm operation.
     * @callback module:api/DefaultApi~getTaxableSalesPerCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxableSalesPerCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxableSalesPerCustomerForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxableSalesPerCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-sales-per-customer-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxableSalesPerCustomerView operation.
     * @callback module:api/DefaultApi~getTaxableSalesPerCustomerViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTaxableSalesPerCustomerViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTaxableSalesPerCustomerView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTaxableSalesPerCustomerView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-sales-per-customer-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextCustomFieldForm operation.
     * @callback module:api/DefaultApi~getTextCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTextCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTextCustomFieldForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTextCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/text-custom-field-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextCustomFields operation.
     * @callback module:api/DefaultApi~getTextCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Text Custom Fields
     * Retrieve list of text custom fields. For more information, see https://www.manager.io/guides?text-custom-fields
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getTextCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTextCustomFields(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/text-custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThemeForm operation.
     * @callback module:api/DefaultApi~getThemeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getThemeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getThemeForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getThemeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/theme-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/DefaultApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions
     * Retrieve list of transactions. For more information, see https://www.manager.io/guides?transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrialBalanceForm operation.
     * @callback module:api/DefaultApi~getTrialBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTrialBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTrialBalanceForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTrialBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trial-balance-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrialBalanceTransactions operation.
     * @callback module:api/DefaultApi~getTrialBalanceTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TrialBalanceTransactions
     * Retrieve list of trialbalancetransactions. For more information, see https://www.manager.io/guides?trial-balance-transactions
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getTrialBalanceTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTrialBalanceTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/trial-balance-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrialBalanceView operation.
     * @callback module:api/DefaultApi~getTrialBalanceViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getTrialBalanceViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTrialBalanceView(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTrialBalanceView");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trial-balance-view/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPermissionsForm operation.
     * @callback module:api/DefaultApi~getUserPermissionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getUserPermissionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserPermissionsForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getUserPermissionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-permissions-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebServiceForExchangeRatesForm operation.
     * @callback module:api/DefaultApi~getWebServiceForExchangeRatesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getWebServiceForExchangeRatesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWebServiceForExchangeRatesForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getWebServiceForExchangeRatesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/web-service-for-exchange-rates-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWithholdingTaxForm operation.
     * @callback module:api/DefaultApi~getWithholdingTaxFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getWithholdingTaxFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWithholdingTaxForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getWithholdingTaxForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWithholdingTaxReceiptForm operation.
     * @callback module:api/DefaultApi~getWithholdingTaxReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource by Key
     * @param {String} key 
     * @param {module:api/DefaultApi~getWithholdingTaxReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWithholdingTaxReceiptForm(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getWithholdingTaxReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-receipt-form/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWithholdingTaxReceipts operation.
     * @callback module:api/DefaultApi~getWithholdingTaxReceiptsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withholding Tax Receipts
     * Retrieve list of withholding tax receipts. For more information, see https://www.manager.io/guides?withholding-tax-receipts
     * @param {Object} opts Optional parameters
     * @param {String} [term] 
     * @param {Boolean} [sortByDesc] 
     * @param {module:model/String} [sortBy] 
     * @param {Number} [skip] 
     * @param {Number} [pageSize] 
     * @param {Array.<module:model/String>} [fields] 
     * @param {module:api/DefaultApi~getWithholdingTaxReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWithholdingTaxReceipts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term'],
        'sortByDesc': opts['sortByDesc'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccessTokenForm operation.
     * @callback module:api/DefaultApi~postAccessTokenFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AccessTokenForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postAccessTokenFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAccessTokenForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAccessTokenForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/access-token-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAgedPayablesForm operation.
     * @callback module:api/DefaultApi~postAgedPayablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AgedPayablesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postAgedPayablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAgedPayablesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAgedPayablesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-payables-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAgedReceivablesForm operation.
     * @callback module:api/DefaultApi~postAgedReceivablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AgedReceivablesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postAgedReceivablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAgedReceivablesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAgedReceivablesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-receivables-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAmortizationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~postAmortizationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AmortizationCalculationWorksheetForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postAmortizationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAmortizationCalculationWorksheetForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAmortizationCalculationWorksheetForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-calculation-worksheet-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAmortizationEntryForm operation.
     * @callback module:api/DefaultApi~postAmortizationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AmortizationEntryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postAmortizationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAmortizationEntryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAmortizationEntryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-entry-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAttachmentForm operation.
     * @callback module:api/DefaultApi~postAttachmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AttachmentForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postAttachmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAttachmentForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAttachmentForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attachment-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetAccountStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetAccountStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetAccountStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetAccountsPayableAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetAccountsPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetAccountsPayableAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetAccountsPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetAccountsPayableAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetAccountsPayableAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-payable-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetAccountsReceivableAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetAccountsReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetAccountsReceivableAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetAccountsReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetAccountsReceivableAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetAccountsReceivableAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-receivable-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetBillableExpensesAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetBillableExpensesAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetBillableExpensesAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetBillableExpensesAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetBillableExpensesAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetBillableExpensesAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-expenses-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetBillableTimeAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetBillableTimeAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetBillableTimeAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetBillableTimeAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetBillableTimeAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetBillableTimeAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-time-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetCapitalAccountsAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetCapitalAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetCapitalAccountsAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetCapitalAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetCapitalAccountsAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetCapitalAccountsAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-capital-accounts-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetCashAtBankAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetCashAtBankAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetCashAtBankAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetCashAtBankAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetCashAtBankAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetCashAtBankAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-cash-at-bank-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetEmployeeClearingAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetEmployeeClearingAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetEmployeeClearingAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetEmployeeClearingAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetEmployeeClearingAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetEmployeeClearingAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-employee-clearing-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetEquityGroupNameForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetEquityGroupNameFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetEquityGroupNameForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetEquityGroupNameFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetEquityGroupNameForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetEquityGroupNameForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-equity-group-name-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetExpenseClaimsAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetExpenseClaimsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetExpenseClaimsAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetExpenseClaimsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetExpenseClaimsAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetExpenseClaimsAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-expense-claims-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetFixedAssetsAccumulatedDepreciationAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-accumulated-depreciation-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetFixedAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetFixedAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetFixedAssetsAtCostAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetFixedAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetFixedAssetsAtCostAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetFixedAssetsAtCostAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-at-cost-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetGroupForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetGroupForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetGroupForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetGroupForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-group-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-accumulated-amortization-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetIntangibleAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetIntangibleAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetIntangibleAssetsAtCostAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetIntangibleAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetIntangibleAssetsAtCostAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetIntangibleAssetsAtCostAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-at-cost-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetInterAccountTransfersForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetInterAccountTransfersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetInterAccountTransfersForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetInterAccountTransfersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetInterAccountTransfersForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetInterAccountTransfersForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inter-account-transfers-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetInventoryOnHandAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetInventoryOnHandAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetInventoryOnHandAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetInventoryOnHandAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetInventoryOnHandAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetInventoryOnHandAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inventory-on-hand-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetInvestmentsAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetInvestmentsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetInvestmentsAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetInvestmentsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetInvestmentsAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetInvestmentsAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-investments-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetProductionInProgressAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetProductionInProgressAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetProductionInProgressAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetProductionInProgressAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetProductionInProgressAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetProductionInProgressAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-production-in-progress-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetRetainedEarningsAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetRetainedEarningsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetRetainedEarningsAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetRetainedEarningsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetRetainedEarningsAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetRetainedEarningsAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-retained-earnings-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetSpecialAccountsAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetSpecialAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetSpecialAccountsAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetSpecialAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetSpecialAccountsAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetSpecialAccountsAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-special-accounts-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetSuspenseAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetSuspenseAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetSuspenseAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetSuspenseAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetSuspenseAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetSuspenseAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-suspense-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetTaxPayableAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetTaxPayableAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetTaxPayableAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-tax-payable-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetWithholdingTaxAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetWithholdingTaxAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetWithholdingTaxAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetWithholdingTaxAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetWithholdingTaxAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetWithholdingTaxAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetWithholdingTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetWithholdingTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetWithholdingTaxPayableAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetWithholdingTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetWithholdingTaxPayableAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetWithholdingTaxPayableAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-payable-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBalanceSheetWithholdingTaxReceivableAccountForm operation.
     * @callback module:api/DefaultApi~postBalanceSheetWithholdingTaxReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceSheetWithholdingTaxReceivableAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBalanceSheetWithholdingTaxReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBalanceSheetWithholdingTaxReceivableAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBalanceSheetWithholdingTaxReceivableAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-receivable-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBankAccountSummaryForm operation.
     * @callback module:api/DefaultApi~postBankAccountSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BankAccountSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBankAccountSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBankAccountSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBankAccountSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-account-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBankFeedProviderForm operation.
     * @callback module:api/DefaultApi~postBankFeedProviderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BankFeedProviderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBankFeedProviderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBankFeedProviderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBankFeedProviderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-feed-provider-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBankOrCashAccountForm operation.
     * @callback module:api/DefaultApi~postBankOrCashAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BankOrCashAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBankOrCashAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBankOrCashAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBankOrCashAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBankOrCashAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postBankOrCashAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BankOrCashAccountStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBankOrCashAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBankOrCashAccountStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBankOrCashAccountStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBankReconciliationForm operation.
     * @callback module:api/DefaultApi~postBankReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BankReconciliationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBankReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBankReconciliationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBankReconciliationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-reconciliation-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBaseCurrencyForm operation.
     * @callback module:api/DefaultApi~postBaseCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BaseCurrencyForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBaseCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBaseCurrencyForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBaseCurrencyForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/base-currency-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBillableExpensesForm operation.
     * @callback module:api/DefaultApi~postBillableExpensesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BillableExpensesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBillableExpensesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBillableExpensesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBillableExpensesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-expenses-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBillableTimeEntryForm operation.
     * @callback module:api/DefaultApi~postBillableTimeEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BillableTimeEntryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBillableTimeEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBillableTimeEntryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBillableTimeEntryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-entry-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBillableTimeSummaryForm operation.
     * @callback module:api/DefaultApi~postBillableTimeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BillableTimeSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBillableTimeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBillableTimeSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBillableTimeSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBusinessDetailsForm operation.
     * @callback module:api/DefaultApi~postBusinessDetailsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BusinessDetailsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postBusinessDetailsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBusinessDetailsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBusinessDetailsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/business-details-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCapitalAccountForm operation.
     * @callback module:api/DefaultApi~postCapitalAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CapitalAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCapitalAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCapitalAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCapitalAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCapitalAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postCapitalAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CapitalAccountStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCapitalAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCapitalAccountStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCapitalAccountStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCapitalAccountsSummaryForm operation.
     * @callback module:api/DefaultApi~postCapitalAccountsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CapitalAccountsSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCapitalAccountsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCapitalAccountsSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCapitalAccountsSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-accounts-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCapitalSubaccountForm operation.
     * @callback module:api/DefaultApi~postCapitalSubaccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CapitalSubaccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCapitalSubaccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCapitalSubaccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCapitalSubaccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-subaccount-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCashFlowStatementFinancingActivityGroupForm operation.
     * @callback module:api/DefaultApi~postCashFlowStatementFinancingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CashFlowStatementFinancingActivityGroupForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCashFlowStatementFinancingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCashFlowStatementFinancingActivityGroupForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCashFlowStatementFinancingActivityGroupForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-financing-activity-group-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCashFlowStatementForm operation.
     * @callback module:api/DefaultApi~postCashFlowStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CashFlowStatementForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCashFlowStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCashFlowStatementForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCashFlowStatementForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCashFlowStatementInvestingActivityGroupForm operation.
     * @callback module:api/DefaultApi~postCashFlowStatementInvestingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CashFlowStatementInvestingActivityGroupForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCashFlowStatementInvestingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCashFlowStatementInvestingActivityGroupForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCashFlowStatementInvestingActivityGroupForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-investing-activity-group-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCashFlowStatementOperatingActivityGroupForm operation.
     * @callback module:api/DefaultApi~postCashFlowStatementOperatingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CashFlowStatementOperatingActivityGroupForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCashFlowStatementOperatingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCashFlowStatementOperatingActivityGroupForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCashFlowStatementOperatingActivityGroupForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-operating-activity-group-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCheckboxCustomFieldForm operation.
     * @callback module:api/DefaultApi~postCheckboxCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CheckboxCustomFieldForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCheckboxCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCheckboxCustomFieldForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCheckboxCustomFieldForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checkbox-custom-field-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postClassicCustomFieldForm operation.
     * @callback module:api/DefaultApi~postClassicCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ClassicCustomFieldForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postClassicCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postClassicCustomFieldForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postClassicCustomFieldForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/classic-custom-field-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForBankAccountsForm operation.
     * @callback module:api/DefaultApi~postControlAccountForBankAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForBankAccountsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForBankAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForBankAccountsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForBankAccountsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-bank-accounts-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForCapitalAccountsForm operation.
     * @callback module:api/DefaultApi~postControlAccountForCapitalAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForCapitalAccountsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForCapitalAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForCapitalAccountsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForCapitalAccountsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-capital-accounts-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForCustomersForm operation.
     * @callback module:api/DefaultApi~postControlAccountForCustomersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForCustomersForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForCustomersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForCustomersForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForCustomersForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-customers-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForEmployeesForm operation.
     * @callback module:api/DefaultApi~postControlAccountForEmployeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForEmployeesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForEmployeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForEmployeesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForEmployeesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-employees-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForFixedAssetsAccumulatedDepreciationForm operation.
     * @callback module:api/DefaultApi~postControlAccountForFixedAssetsAccumulatedDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForFixedAssetsAccumulatedDepreciationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForFixedAssetsAccumulatedDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForFixedAssetsAccumulatedDepreciationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForFixedAssetsAccumulatedDepreciationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-accumulated-depreciation-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForFixedAssetsForm operation.
     * @callback module:api/DefaultApi~postControlAccountForFixedAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForFixedAssetsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForFixedAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForFixedAssetsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForFixedAssetsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForIntangibleAssetsAccumulatedAmortizationForm operation.
     * @callback module:api/DefaultApi~postControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForIntangibleAssetsAccumulatedAmortizationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForIntangibleAssetsAccumulatedAmortizationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForIntangibleAssetsAccumulatedAmortizationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-accumulated-amortization-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForIntangibleAssetsForm operation.
     * @callback module:api/DefaultApi~postControlAccountForIntangibleAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForIntangibleAssetsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForIntangibleAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForIntangibleAssetsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForIntangibleAssetsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForInventoryItemsForm operation.
     * @callback module:api/DefaultApi~postControlAccountForInventoryItemsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForInventoryItemsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForInventoryItemsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForInventoryItemsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForInventoryItemsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-inventory-items-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForInvestmentsForm operation.
     * @callback module:api/DefaultApi~postControlAccountForInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForInvestmentsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForInvestmentsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForInvestmentsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-investments-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForSpecialAccountsForm operation.
     * @callback module:api/DefaultApi~postControlAccountForSpecialAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForSpecialAccountsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForSpecialAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForSpecialAccountsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForSpecialAccountsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-special-accounts-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postControlAccountForSuppliersForm operation.
     * @callback module:api/DefaultApi~postControlAccountForSuppliersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ControlAccountForSuppliersForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postControlAccountForSuppliersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postControlAccountForSuppliersForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postControlAccountForSuppliersForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-suppliers-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCreditNoteFooterForm operation.
     * @callback module:api/DefaultApi~postCreditNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreditNoteFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCreditNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCreditNoteFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCreditNoteFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCreditNoteForm operation.
     * @callback module:api/DefaultApi~postCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreditNoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCreditNoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCreditNoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomReportForm operation.
     * @callback module:api/DefaultApi~postCustomReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CustomReportForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCustomReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCustomReportForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomReportForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom-report-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomerForm operation.
     * @callback module:api/DefaultApi~postCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CustomerForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCustomerForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomerPortalForm operation.
     * @callback module:api/DefaultApi~postCustomerPortalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CustomerPortalForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCustomerPortalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCustomerPortalForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerPortalForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-portal-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomerStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~postCustomerStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CustomerStatementsTransactionsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCustomerStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCustomerStatementsTransactionsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerStatementsTransactionsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-transactions-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomerStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~postCustomerStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CustomerStatementsUnpaidInvoicesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCustomerStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCustomerStatementsUnpaidInvoicesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-unpaid-invoices-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomerSummaryForm operation.
     * @callback module:api/DefaultApi~postCustomerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CustomerSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postCustomerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCustomerSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomerSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDateAndNumberFormatForm operation.
     * @callback module:api/DefaultApi~postDateAndNumberFormatFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DateAndNumberFormatForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDateAndNumberFormatFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDateAndNumberFormatForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDateAndNumberFormatForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-and-number-format-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDateCustomFieldForm operation.
     * @callback module:api/DefaultApi~postDateCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DateCustomFieldForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDateCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDateCustomFieldForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDateCustomFieldForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-custom-field-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDebitNoteFooterForm operation.
     * @callback module:api/DefaultApi~postDebitNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DebitNoteFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDebitNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDebitNoteFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDebitNoteFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDebitNoteForm operation.
     * @callback module:api/DefaultApi~postDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DebitNoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDebitNoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDebitNoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDeliveryNoteFooterForm operation.
     * @callback module:api/DefaultApi~postDeliveryNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeliveryNoteFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDeliveryNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDeliveryNoteFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDeliveryNoteFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~postDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeliveryNoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDeliveryNoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDeliveryNoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDepreciationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~postDepreciationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DepreciationCalculationWorksheetForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDepreciationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDepreciationCalculationWorksheetForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDepreciationCalculationWorksheetForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-calculation-worksheet-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDepreciationEntryForm operation.
     * @callback module:api/DefaultApi~postDepreciationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DepreciationEntryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDepreciationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDepreciationEntryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDepreciationEntryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-entry-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDivisionExceptionReportForm operation.
     * @callback module:api/DefaultApi~postDivisionExceptionReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DivisionExceptionReportForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDivisionExceptionReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDivisionExceptionReportForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDivisionExceptionReportForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-exception-report-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDivisionForm operation.
     * @callback module:api/DefaultApi~postDivisionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DivisionForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postDivisionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDivisionForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDivisionForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailSettingsForm operation.
     * @callback module:api/DefaultApi~postEmailSettingsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailSettingsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailSettingsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailSettingsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailSettingsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-settings-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForCreditNoteForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForCreditNoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForCreditNoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForCreditNoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-credit-note-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForCustomerStatementForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForCustomerStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForCustomerStatementForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForCustomerStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForCustomerStatementForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForCustomerStatementForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-customer-statement-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForDebitNoteForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForDebitNoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForDebitNoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForDebitNoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-debit-note-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForDeliveryNoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForDeliveryNoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForDeliveryNoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-delivery-note-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForPaymentForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForPaymentForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForPaymentForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForPaymentForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payment-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForPayslipForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForPayslipForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForPayslipForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForPayslipForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payslip-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForPurchaseInvoiceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForPurchaseInvoiceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForPurchaseInvoiceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-invoice-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForPurchaseOrderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForPurchaseOrderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForPurchaseOrderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-order-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForPurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForPurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForPurchaseQuoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForPurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForPurchaseQuoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForPurchaseQuoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-quote-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForReceiptForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForReceiptForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForReceiptForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForReceiptForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-receipt-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForSalesInvoiceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForSalesInvoiceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForSalesInvoiceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-invoice-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForSalesOrderForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForSalesOrderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForSalesOrderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForSalesOrderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-order-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmailTemplateForSalesQuoteForm operation.
     * @callback module:api/DefaultApi~postEmailTemplateForSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmailTemplateForSalesQuoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmailTemplateForSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmailTemplateForSalesQuoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmailTemplateForSalesQuoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-quote-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmployeeForm operation.
     * @callback module:api/DefaultApi~postEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmployeeForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmployeeForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmployeeForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmployeeStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postEmployeeStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmployeeStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmployeeStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmployeeStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmployeeStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEmployeeSummaryForm operation.
     * @callback module:api/DefaultApi~postEmployeeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EmployeeSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postEmployeeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEmployeeSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEmployeeSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postExchangeRateForm operation.
     * @callback module:api/DefaultApi~postExchangeRateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExchangeRateForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postExchangeRateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postExchangeRateForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postExchangeRateForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/exchange-rate-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postExpenseClaimFooterForm operation.
     * @callback module:api/DefaultApi~postExpenseClaimFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExpenseClaimFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postExpenseClaimFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postExpenseClaimFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postExpenseClaimFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postExpenseClaimForm operation.
     * @callback module:api/DefaultApi~postExpenseClaimFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExpenseClaimForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postExpenseClaimFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postExpenseClaimForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postExpenseClaimForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postExpenseClaimPayerForm operation.
     * @callback module:api/DefaultApi~postExpenseClaimPayerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExpenseClaimPayerForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postExpenseClaimPayerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postExpenseClaimPayerForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postExpenseClaimPayerForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-payer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postExpenseClaimsSummaryForm operation.
     * @callback module:api/DefaultApi~postExpenseClaimsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExpenseClaimsSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postExpenseClaimsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postExpenseClaimsSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postExpenseClaimsSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claims-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postExtensionForm operation.
     * @callback module:api/DefaultApi~postExtensionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExtensionForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postExtensionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postExtensionForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postExtensionForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extension-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFixedAssetForm operation.
     * @callback module:api/DefaultApi~postFixedAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FixedAssetForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postFixedAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postFixedAssetForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFixedAssetForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFixedAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postFixedAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FixedAssetStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postFixedAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postFixedAssetStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFixedAssetStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFixedAssetSummaryForm operation.
     * @callback module:api/DefaultApi~postFixedAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FixedAssetSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postFixedAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postFixedAssetSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFixedAssetSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFolderForm operation.
     * @callback module:api/DefaultApi~postFolderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FolderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postFolderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postFolderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFolderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/folder-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postForecastForm operation.
     * @callback module:api/DefaultApi~postForecastFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ForecastForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postForecastFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postForecastForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postForecastForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postForecastProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~postForecastProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ForecastProfitAndLossStatementForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postForecastProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postForecastProfitAndLossStatementForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postForecastProfitAndLossStatementForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-profit-and-loss-statement-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postForeignCurrencyForm operation.
     * @callback module:api/DefaultApi~postForeignCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ForeignCurrencyForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postForeignCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postForeignCurrencyForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postForeignCurrencyForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/foreign-currency-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGeneralLedgerSummaryForm operation.
     * @callback module:api/DefaultApi~postGeneralLedgerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GeneralLedgerSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postGeneralLedgerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postGeneralLedgerSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postGeneralLedgerSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGeneralLedgerTransactionsForm operation.
     * @callback module:api/DefaultApi~postGeneralLedgerTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GeneralLedgerTransactionsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postGeneralLedgerTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postGeneralLedgerTransactionsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postGeneralLedgerTransactionsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-transactions-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGoodsReceiptFooterForm operation.
     * @callback module:api/DefaultApi~postGoodsReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GoodsReceiptFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postGoodsReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postGoodsReceiptFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postGoodsReceiptFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGoodsReceiptForm operation.
     * @callback module:api/DefaultApi~postGoodsReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GoodsReceiptForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postGoodsReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postGoodsReceiptForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postGoodsReceiptForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postIntangibleAssetForm operation.
     * @callback module:api/DefaultApi~postIntangibleAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IntangibleAssetForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postIntangibleAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postIntangibleAssetForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postIntangibleAssetForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postIntangibleAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postIntangibleAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IntangibleAssetStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postIntangibleAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postIntangibleAssetStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postIntangibleAssetStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postIntangibleAssetSummaryForm operation.
     * @callback module:api/DefaultApi~postIntangibleAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IntangibleAssetSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postIntangibleAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postIntangibleAssetSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postIntangibleAssetSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInterAccountTransferFooterForm operation.
     * @callback module:api/DefaultApi~postInterAccountTransferFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InterAccountTransferFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInterAccountTransferFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInterAccountTransferFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInterAccountTransferFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~postInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InterAccountTransferForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInterAccountTransferForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInterAccountTransferForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInternalPdfGeneratorForm operation.
     * @callback module:api/DefaultApi~postInternalPdfGeneratorFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InternalPdfGeneratorForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInternalPdfGeneratorFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInternalPdfGeneratorForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInternalPdfGeneratorForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/internal-pdf-generator-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventmentForm operation.
     * @callback module:api/DefaultApi~postInventmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventmentForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventmentForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventmentForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventment-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryAutomaticRevaluationForm operation.
     * @callback module:api/DefaultApi~postInventoryAutomaticRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryAutomaticRevaluationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryAutomaticRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryAutomaticRevaluationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryAutomaticRevaluationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-automatic-revaluation-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryItemForm operation.
     * @callback module:api/DefaultApi~postInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryItemForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryItemForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryItemStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postInventoryItemStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryItemStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryItemStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryItemStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryItemStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryKitForm operation.
     * @callback module:api/DefaultApi~postInventoryKitFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryKitForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryKitFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryKitForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryKitForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-kit-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryLocationForm operation.
     * @callback module:api/DefaultApi~postInventoryLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryLocationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryLocationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryLocationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-location-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryPriceListForm operation.
     * @callback module:api/DefaultApi~postInventoryPriceListFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryPriceListForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryPriceListFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryPriceListForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryPriceListForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-price-list-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryProfitMarginForm operation.
     * @callback module:api/DefaultApi~postInventoryProfitMarginFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryProfitMarginForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryProfitMarginFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryProfitMarginForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryProfitMarginForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-profit-margin-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryQuantityByLocationForm operation.
     * @callback module:api/DefaultApi~postInventoryQuantityByLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryQuantityByLocationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryQuantityByLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryQuantityByLocationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryQuantityByLocationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-by-location-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryQuantitySummaryForm operation.
     * @callback module:api/DefaultApi~postInventoryQuantitySummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryQuantitySummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryQuantitySummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryQuantitySummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryQuantitySummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryRevaluationForm operation.
     * @callback module:api/DefaultApi~postInventoryRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryRevaluationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryRevaluationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryRevaluationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-revaluation-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryTransferForm operation.
     * @callback module:api/DefaultApi~postInventoryTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryTransferForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryTransferForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryTransferForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-transfer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryValueSummaryForm operation.
     * @callback module:api/DefaultApi~postInventoryValueSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryValueSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryValueSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryValueSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryValueSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-value-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInventoryWriteOffForm operation.
     * @callback module:api/DefaultApi~postInventoryWriteOffFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InventoryWriteOffForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInventoryWriteOffFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInventoryWriteOffForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInventoryWriteOffForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-write-off-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInvestmentMarketPriceForm operation.
     * @callback module:api/DefaultApi~postInvestmentMarketPriceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InvestmentMarketPriceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInvestmentMarketPriceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInvestmentMarketPriceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInvestmentMarketPriceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-market-price-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInvestmentStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postInvestmentStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InvestmentStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postInvestmentStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInvestmentStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postInvestmentStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJournalEntryFooterForm operation.
     * @callback module:api/DefaultApi~postJournalEntryFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JournalEntryFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postJournalEntryFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postJournalEntryFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postJournalEntryFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postJournalEntryForm operation.
     * @callback module:api/DefaultApi~postJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JournalEntryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postJournalEntryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postJournalEntryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLatePaymentFeeForm operation.
     * @callback module:api/DefaultApi~postLatePaymentFeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LatePaymentFeeForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postLatePaymentFeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postLatePaymentFeeForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postLatePaymentFeeForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/late-payment-fee-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLockDateForm operation.
     * @callback module:api/DefaultApi~postLockDateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LockDateForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postLockDateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postLockDateForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postLockDateForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lock-date-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMultipleValueCustomFieldForm operation.
     * @callback module:api/DefaultApi~postMultipleValueCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * MultipleValueCustomFieldForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postMultipleValueCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postMultipleValueCustomFieldForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postMultipleValueCustomFieldForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/multiple-value-custom-field-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNonInventoryItemForm operation.
     * @callback module:api/DefaultApi~postNonInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NonInventoryItemForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postNonInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postNonInventoryItemForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postNonInventoryItemForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/non-inventory-item-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNumberCustomFieldForm operation.
     * @callback module:api/DefaultApi~postNumberCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NumberCustomFieldForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postNumberCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postNumberCustomFieldForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postNumberCustomFieldForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/number-custom-field-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPaymentFooterForm operation.
     * @callback module:api/DefaultApi~postPaymentFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PaymentFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPaymentFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPaymentFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPaymentFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPaymentForm operation.
     * @callback module:api/DefaultApi~postPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PaymentForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPaymentForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPaymentForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPaymentRuleForm operation.
     * @callback module:api/DefaultApi~postPaymentRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PaymentRuleForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPaymentRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPaymentRuleForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPaymentRuleForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-rule-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipContributionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~postPayslipContributionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipContributionItemReportingCategoryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipContributionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipContributionItemReportingCategoryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipContributionItemReportingCategoryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-contribution-item-reporting-category-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipDeductionItemForm operation.
     * @callback module:api/DefaultApi~postPayslipDeductionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipDeductionItemForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipDeductionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipDeductionItemForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipDeductionItemForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipDeductionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~postPayslipDeductionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipDeductionItemReportingCategoryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipDeductionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipDeductionItemReportingCategoryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipDeductionItemReportingCategoryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-reporting-category-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipEarningsItemForm operation.
     * @callback module:api/DefaultApi~postPayslipEarningsItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipEarningsItemForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipEarningsItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipEarningsItemForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipEarningsItemForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipEarningsItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~postPayslipEarningsItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipEarningsItemReportingCategoryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipEarningsItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipEarningsItemReportingCategoryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipEarningsItemReportingCategoryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-reporting-category-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipEmployerContributionItemForm operation.
     * @callback module:api/DefaultApi~postPayslipEmployerContributionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipEmployerContributionItemForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipEmployerContributionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipEmployerContributionItemForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipEmployerContributionItemForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-employer-contribution-item-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipFooterForm operation.
     * @callback module:api/DefaultApi~postPayslipFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipForm operation.
     * @callback module:api/DefaultApi~postPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipSummaryForm operation.
     * @callback module:api/DefaultApi~postPayslipSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayslipTotalsPerItemAndEmployeeForm operation.
     * @callback module:api/DefaultApi~postPayslipTotalsPerItemAndEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayslipTotalsPerItemAndEmployeeForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPayslipTotalsPerItemAndEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPayslipTotalsPerItemAndEmployeeForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPayslipTotalsPerItemAndEmployeeForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-totals-per-item-and-employee-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProductionOrderForm operation.
     * @callback module:api/DefaultApi~postProductionOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProductionOrderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProductionOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProductionOrderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProductionOrderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/production-order-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountBillableExpensesCostForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountBillableExpensesCostFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountBillableExpensesCostForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountBillableExpensesCostFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountBillableExpensesCostForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountBillableExpensesCostForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-cost-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountBillableExpensesInvoicedForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountBillableExpensesInvoicedForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountBillableExpensesInvoicedForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountBillableExpensesInvoicedForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-invoiced-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountBillableTimeInvoicedForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountBillableTimeInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountBillableTimeInvoicedForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountBillableTimeInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountBillableTimeInvoicedForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountBillableTimeInvoicedForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-invoiced-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountBillableTimeMovementForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountBillableTimeMovementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountBillableTimeMovementForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountBillableTimeMovementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountBillableTimeMovementForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountBillableTimeMovementForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-movement-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-capital-gains-on-investments-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountCurrencyGainsLossesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountCurrencyGainsLossesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountCurrencyGainsLossesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-currency-gains-losses-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountFixedAssetDepreciationForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountFixedAssetDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountFixedAssetDepreciationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountFixedAssetDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountFixedAssetDepreciationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountFixedAssetDepreciationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-depreciation-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountFixedAssetLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountFixedAssetLossOnDisposalForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountFixedAssetLossOnDisposalForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountFixedAssetLossOnDisposalForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-loss-on-disposal-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountIntangibleAssetsAmortizationForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountIntangibleAssetsAmortizationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountIntangibleAssetsAmortizationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountIntangibleAssetsAmortizationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-amortization-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-gains-loss-on-disposal-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountInventoryPurchasesForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountInventoryPurchasesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountInventoryPurchasesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountInventoryPurchasesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountInventoryPurchasesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountInventoryPurchasesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-purchases-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountInventorySalesForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountInventorySalesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountInventorySalesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountInventorySalesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountInventorySalesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountInventorySalesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-sales-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountLatePaymentFeesForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountLatePaymentFeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountLatePaymentFeesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountLatePaymentFeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountLatePaymentFeesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountLatePaymentFeesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-late-payment-fees-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementAccountRoundingExpenseForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementAccountRoundingExpenseFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementAccountRoundingExpenseForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementAccountRoundingExpenseFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementAccountRoundingExpenseForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementAccountRoundingExpenseForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-rounding-expense-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementActualVsBudgetForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementActualVsBudgetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementActualVsBudgetForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementActualVsBudgetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementActualVsBudgetForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementActualVsBudgetForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-actual-vs-budget-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementGroupForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementGroupForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementGroupForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementGroupForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-group-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementSubtotalForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementSubtotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementSubtotalForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementSubtotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementSubtotalForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementSubtotalForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-subtotal-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfitAndLossStatementTotalForm operation.
     * @callback module:api/DefaultApi~postProfitAndLossStatementTotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProfitAndLossStatementTotalForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProfitAndLossStatementTotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProfitAndLossStatementTotalForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProfitAndLossStatementTotalForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-total-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProjectForm operation.
     * @callback module:api/DefaultApi~postProjectFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProjectForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postProjectFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProjectForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProjectForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPurchaseInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~postPurchaseInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseInvoiceFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPurchaseInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPurchaseInvoiceFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPurchaseInvoiceFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~postPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseInvoiceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPurchaseInvoiceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPurchaseInvoiceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPurchaseInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postPurchaseInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseInvoiceStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPurchaseInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPurchaseInvoiceStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPurchaseInvoiceStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPurchaseOrderFooterForm operation.
     * @callback module:api/DefaultApi~postPurchaseOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseOrderFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPurchaseOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPurchaseOrderFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPurchaseOrderFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~postPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseOrderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPurchaseOrderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPurchaseOrderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPurchaseQuoteFooterForm operation.
     * @callback module:api/DefaultApi~postPurchaseQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseQuoteFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPurchaseQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPurchaseQuoteFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPurchaseQuoteFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~postPurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PurchaseQuoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postPurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPurchaseQuoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPurchaseQuoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRealizedCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~postRealizedCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RealizedCurrencyGainsLossesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRealizedCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRealizedCurrencyGainsLossesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRealizedCurrencyGainsLossesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-currency-gains-losses-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRealizedInvestmentGainsSummaryForm operation.
     * @callback module:api/DefaultApi~postRealizedInvestmentGainsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RealizedInvestmentGainsSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRealizedInvestmentGainsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRealizedInvestmentGainsSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRealizedInvestmentGainsSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-investment-gains-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReceiptFooterForm operation.
     * @callback module:api/DefaultApi~postReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReceiptFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postReceiptFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postReceiptFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReceiptForm operation.
     * @callback module:api/DefaultApi~postReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReceiptForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postReceiptForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postReceiptForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReceiptRuleForm operation.
     * @callback module:api/DefaultApi~postReceiptRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReceiptRuleForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postReceiptRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postReceiptRuleForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postReceiptRuleForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-rule-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReceiptsAndPaymentsSummaryForm operation.
     * @callback module:api/DefaultApi~postReceiptsAndPaymentsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReceiptsAndPaymentsSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postReceiptsAndPaymentsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postReceiptsAndPaymentsSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postReceiptsAndPaymentsSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipts-and-payments-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~postRecurringInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringInterAccountTransferForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringInterAccountTransferForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringInterAccountTransferForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-inter-account-transfer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringJournalEntryForm operation.
     * @callback module:api/DefaultApi~postRecurringJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringJournalEntryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringJournalEntryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringJournalEntryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-journal-entry-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringPaymentForm operation.
     * @callback module:api/DefaultApi~postRecurringPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringPaymentForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringPaymentForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringPaymentForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payment-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringPayslipForm operation.
     * @callback module:api/DefaultApi~postRecurringPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringPayslipForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringPayslipForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringPayslipForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payslip-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~postRecurringPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringPurchaseInvoiceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringPurchaseInvoiceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringPurchaseInvoiceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-invoice-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~postRecurringPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringPurchaseOrderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringPurchaseOrderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringPurchaseOrderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-order-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringReceiptForm operation.
     * @callback module:api/DefaultApi~postRecurringReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringReceiptForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringReceiptForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringReceiptForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-receipt-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~postRecurringSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringSalesInvoiceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringSalesInvoiceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringSalesInvoiceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-invoice-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringSalesOrderForm operation.
     * @callback module:api/DefaultApi~postRecurringSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringSalesOrderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringSalesOrderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringSalesOrderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-order-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecurringSalesQuoteForm operation.
     * @callback module:api/DefaultApi~postRecurringSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RecurringSalesQuoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postRecurringSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRecurringSalesQuoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRecurringSalesQuoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-quote-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReportTransformationForm operation.
     * @callback module:api/DefaultApi~postReportTransformationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReportTransformationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postReportTransformationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postReportTransformationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postReportTransformationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReportTransformationLabelForm operation.
     * @callback module:api/DefaultApi~postReportTransformationLabelFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReportTransformationLabelForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postReportTransformationLabelFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postReportTransformationLabelForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postReportTransformationLabelForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-label-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postReportTransformationReportForm operation.
     * @callback module:api/DefaultApi~postReportTransformationReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReportTransformationReportForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postReportTransformationReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postReportTransformationReportForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postReportTransformationReportForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-report-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~postSalesInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesInvoiceFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesInvoiceFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~postSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesInvoiceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesInvoiceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postSalesInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesInvoiceStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesInvoiceStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesInvoiceTotalsByCustomFieldForm operation.
     * @callback module:api/DefaultApi~postSalesInvoiceTotalsByCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceTotalsByCustomFieldForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesInvoiceTotalsByCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesInvoiceTotalsByCustomFieldForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesInvoiceTotalsByCustomFieldForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-custom-field-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesInvoiceTotalsByCustomerForm operation.
     * @callback module:api/DefaultApi~postSalesInvoiceTotalsByCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceTotalsByCustomerForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesInvoiceTotalsByCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesInvoiceTotalsByCustomerForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesInvoiceTotalsByCustomerForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-customer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesInvoiceTotalsByItemForm operation.
     * @callback module:api/DefaultApi~postSalesInvoiceTotalsByItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesInvoiceTotalsByItemForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesInvoiceTotalsByItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesInvoiceTotalsByItemForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesInvoiceTotalsByItemForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-item-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesOrderFooterForm operation.
     * @callback module:api/DefaultApi~postSalesOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesOrderFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesOrderFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesOrderFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesOrderForm operation.
     * @callback module:api/DefaultApi~postSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesOrderForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesOrderForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesOrderForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesQuoteFooterForm operation.
     * @callback module:api/DefaultApi~postSalesQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesQuoteFooterForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesQuoteFooterForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesQuoteFooterForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-footer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesQuoteForm operation.
     * @callback module:api/DefaultApi~postSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SalesQuoteForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSalesQuoteForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSalesQuoteForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSpecialAccountForm operation.
     * @callback module:api/DefaultApi~postSpecialAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SpecialAccountForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSpecialAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSpecialAccountForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSpecialAccountForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSpecialAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~postSpecialAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SpecialAccountStartingBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSpecialAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSpecialAccountStartingBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSpecialAccountStartingBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-starting-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postStatementOfChangesInEquityForm operation.
     * @callback module:api/DefaultApi~postStatementOfChangesInEquityFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * StatementOfChangesInEquityForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postStatementOfChangesInEquityFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postStatementOfChangesInEquityForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postStatementOfChangesInEquityForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/statement-of-changes-in-equity-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSummaryForm operation.
     * @callback module:api/DefaultApi~postSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSupplierForm operation.
     * @callback module:api/DefaultApi~postSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SupplierForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSupplierForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSupplierForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSupplierStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~postSupplierStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SupplierStatementsTransactionsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSupplierStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSupplierStatementsTransactionsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSupplierStatementsTransactionsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-transactions-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSupplierStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~postSupplierStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SupplierStatementsUnpaidInvoicesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSupplierStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSupplierStatementsUnpaidInvoicesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSupplierStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-unpaid-invoices-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSupplierSummaryForm operation.
     * @callback module:api/DefaultApi~postSupplierSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SupplierSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postSupplierSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSupplierSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSupplierSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTabsForm operation.
     * @callback module:api/DefaultApi~postTabsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TabsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTabsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTabsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTabsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tabs-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxAmountReportingCategoryForm operation.
     * @callback module:api/DefaultApi~postTaxAmountReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxAmountReportingCategoryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxAmountReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxAmountReportingCategoryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxAmountReportingCategoryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reporting-category-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxAmountReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~postTaxAmountReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxAmountReversedReportingCategoryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxAmountReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxAmountReversedReportingCategoryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxAmountReversedReportingCategoryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reversed-reporting-category-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxAuditForm operation.
     * @callback module:api/DefaultApi~postTaxAuditFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxAuditForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxAuditFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxAuditForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxAuditForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-audit-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxCodeForm operation.
     * @callback module:api/DefaultApi~postTaxCodeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxCodeForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxCodeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxCodeForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxCodeForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxCodeReportingCategoryForm operation.
     * @callback module:api/DefaultApi~postTaxCodeReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxCodeReportingCategoryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxCodeReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxCodeReportingCategoryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxCodeReportingCategoryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reporting-category-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxCodeReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~postTaxCodeReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxCodeReversedReportingCategoryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxCodeReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxCodeReversedReportingCategoryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxCodeReversedReportingCategoryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reversed-reporting-category-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxReconciliationForm operation.
     * @callback module:api/DefaultApi~postTaxReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxReconciliationForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxReconciliationForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxReconciliationForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-reconciliation-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxSummaryForm operation.
     * @callback module:api/DefaultApi~postTaxSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxSummaryForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxSummaryForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxSummaryForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-summary-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxTransactionsForm operation.
     * @callback module:api/DefaultApi~postTaxTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxTransactionsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxTransactionsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxTransactionsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-transactions-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxablePurchasesPerSupplierForm operation.
     * @callback module:api/DefaultApi~postTaxablePurchasesPerSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxablePurchasesPerSupplierForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxablePurchasesPerSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxablePurchasesPerSupplierForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxablePurchasesPerSupplierForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-purchases-per-supplier-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaxableSalesPerCustomerForm operation.
     * @callback module:api/DefaultApi~postTaxableSalesPerCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TaxableSalesPerCustomerForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTaxableSalesPerCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTaxableSalesPerCustomerForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTaxableSalesPerCustomerForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-sales-per-customer-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTextCustomFieldForm operation.
     * @callback module:api/DefaultApi~postTextCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TextCustomFieldForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTextCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTextCustomFieldForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTextCustomFieldForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/text-custom-field-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postThemeForm operation.
     * @callback module:api/DefaultApi~postThemeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ThemeForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postThemeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postThemeForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postThemeForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/theme-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTrialBalanceForm operation.
     * @callback module:api/DefaultApi~postTrialBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TrialBalanceForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postTrialBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTrialBalanceForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTrialBalanceForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trial-balance-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUserPermissionsForm operation.
     * @callback module:api/DefaultApi~postUserPermissionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UserPermissionsForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postUserPermissionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUserPermissionsForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postUserPermissionsForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-permissions-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postWebServiceForExchangeRatesForm operation.
     * @callback module:api/DefaultApi~postWebServiceForExchangeRatesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WebServiceForExchangeRatesForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postWebServiceForExchangeRatesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postWebServiceForExchangeRatesForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postWebServiceForExchangeRatesForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/web-service-for-exchange-rates-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postWithholdingTaxForm operation.
     * @callback module:api/DefaultApi~postWithholdingTaxFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WithholdingTaxForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postWithholdingTaxFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postWithholdingTaxForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postWithholdingTaxForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postWithholdingTaxReceiptForm operation.
     * @callback module:api/DefaultApi~postWithholdingTaxReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WithholdingTaxReceiptForm
     * Create a new resource
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~postWithholdingTaxReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postWithholdingTaxReceiptForm(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postWithholdingTaxReceiptForm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-receipt-form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccessTokenForm operation.
     * @callback module:api/DefaultApi~putAccessTokenFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putAccessTokenFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putAccessTokenForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putAccessTokenForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAccessTokenForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/access-token-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAgedPayablesForm operation.
     * @callback module:api/DefaultApi~putAgedPayablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putAgedPayablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putAgedPayablesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putAgedPayablesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAgedPayablesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-payables-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAgedReceivablesForm operation.
     * @callback module:api/DefaultApi~putAgedReceivablesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putAgedReceivablesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putAgedReceivablesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putAgedReceivablesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAgedReceivablesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/aged-receivables-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAmortizationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~putAmortizationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putAmortizationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putAmortizationCalculationWorksheetForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putAmortizationCalculationWorksheetForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAmortizationCalculationWorksheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-calculation-worksheet-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAmortizationEntryForm operation.
     * @callback module:api/DefaultApi~putAmortizationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putAmortizationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putAmortizationEntryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putAmortizationEntryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAmortizationEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/amortization-entry-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAttachmentForm operation.
     * @callback module:api/DefaultApi~putAttachmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putAttachmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putAttachmentForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putAttachmentForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAttachmentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attachment-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetAccountStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetAccountStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-account-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetAccountsPayableAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetAccountsPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetAccountsPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetAccountsPayableAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetAccountsPayableAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetAccountsPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-payable-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetAccountsReceivableAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetAccountsReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetAccountsReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetAccountsReceivableAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetAccountsReceivableAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetAccountsReceivableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-accounts-receivable-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetBillableExpensesAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetBillableExpensesAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetBillableExpensesAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetBillableExpensesAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetBillableExpensesAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetBillableExpensesAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-expenses-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetBillableTimeAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetBillableTimeAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetBillableTimeAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetBillableTimeAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetBillableTimeAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetBillableTimeAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-billable-time-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetCapitalAccountsAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetCapitalAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetCapitalAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetCapitalAccountsAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetCapitalAccountsAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetCapitalAccountsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-capital-accounts-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetCashAtBankAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetCashAtBankAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetCashAtBankAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetCashAtBankAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetCashAtBankAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetCashAtBankAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-cash-at-bank-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetEmployeeClearingAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetEmployeeClearingAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetEmployeeClearingAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetEmployeeClearingAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetEmployeeClearingAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetEmployeeClearingAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-employee-clearing-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetEquityGroupNameForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetEquityGroupNameFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetEquityGroupNameFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetEquityGroupNameForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetEquityGroupNameForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetEquityGroupNameForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-equity-group-name-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetExpenseClaimsAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetExpenseClaimsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetExpenseClaimsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetExpenseClaimsAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetExpenseClaimsAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetExpenseClaimsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-expense-claims-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetFixedAssetsAccumulatedDepreciationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetFixedAssetsAccumulatedDepreciationAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-accumulated-depreciation-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetFixedAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetFixedAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetFixedAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetFixedAssetsAtCostAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetFixedAssetsAtCostAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetFixedAssetsAtCostAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-fixed-assets-at-cost-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetGroupForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetGroupForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetGroupForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-group-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetIntangibleAssetsAccumulatedAmortizationAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-accumulated-amortization-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetIntangibleAssetsAtCostAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetIntangibleAssetsAtCostAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetIntangibleAssetsAtCostAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetIntangibleAssetsAtCostAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetIntangibleAssetsAtCostAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetIntangibleAssetsAtCostAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-intangible-assets-at-cost-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetInterAccountTransfersForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetInterAccountTransfersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetInterAccountTransfersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetInterAccountTransfersForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetInterAccountTransfersForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetInterAccountTransfersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inter-account-transfers-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetInventoryOnHandAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetInventoryOnHandAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetInventoryOnHandAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetInventoryOnHandAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetInventoryOnHandAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetInventoryOnHandAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-inventory-on-hand-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetInvestmentsAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetInvestmentsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetInvestmentsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetInvestmentsAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetInvestmentsAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetInvestmentsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-investments-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetProductionInProgressAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetProductionInProgressAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetProductionInProgressAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetProductionInProgressAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetProductionInProgressAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetProductionInProgressAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-production-in-progress-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetRetainedEarningsAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetRetainedEarningsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetRetainedEarningsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetRetainedEarningsAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetRetainedEarningsAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetRetainedEarningsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-retained-earnings-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetSpecialAccountsAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetSpecialAccountsAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetSpecialAccountsAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetSpecialAccountsAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetSpecialAccountsAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetSpecialAccountsAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-special-accounts-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetSuspenseAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetSuspenseAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetSuspenseAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetSuspenseAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetSuspenseAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetSuspenseAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-suspense-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetTaxPayableAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetTaxPayableAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetTaxPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-tax-payable-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetWithholdingTaxAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetWithholdingTaxAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetWithholdingTaxAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetWithholdingTaxAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetWithholdingTaxAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetWithholdingTaxAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetWithholdingTaxPayableAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetWithholdingTaxPayableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetWithholdingTaxPayableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetWithholdingTaxPayableAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetWithholdingTaxPayableAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetWithholdingTaxPayableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-payable-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBalanceSheetWithholdingTaxReceivableAccountForm operation.
     * @callback module:api/DefaultApi~putBalanceSheetWithholdingTaxReceivableAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBalanceSheetWithholdingTaxReceivableAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBalanceSheetWithholdingTaxReceivableAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBalanceSheetWithholdingTaxReceivableAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBalanceSheetWithholdingTaxReceivableAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/balance-sheet-withholding-tax-receivable-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBankAccountSummaryForm operation.
     * @callback module:api/DefaultApi~putBankAccountSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBankAccountSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBankAccountSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBankAccountSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBankAccountSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-account-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBankFeedProviderForm operation.
     * @callback module:api/DefaultApi~putBankFeedProviderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBankFeedProviderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBankFeedProviderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBankFeedProviderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBankFeedProviderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-feed-provider-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBankOrCashAccountForm operation.
     * @callback module:api/DefaultApi~putBankOrCashAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBankOrCashAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBankOrCashAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBankOrCashAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBankOrCashAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBankOrCashAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putBankOrCashAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBankOrCashAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBankOrCashAccountStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBankOrCashAccountStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBankOrCashAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-or-cash-account-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBankReconciliationForm operation.
     * @callback module:api/DefaultApi~putBankReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBankReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBankReconciliationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBankReconciliationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBankReconciliationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bank-reconciliation-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBaseCurrencyForm operation.
     * @callback module:api/DefaultApi~putBaseCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBaseCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBaseCurrencyForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBaseCurrencyForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBaseCurrencyForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/base-currency-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBillableExpensesForm operation.
     * @callback module:api/DefaultApi~putBillableExpensesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBillableExpensesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBillableExpensesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBillableExpensesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBillableExpensesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-expenses-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBillableTimeEntryForm operation.
     * @callback module:api/DefaultApi~putBillableTimeEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBillableTimeEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBillableTimeEntryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBillableTimeEntryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBillableTimeEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-entry-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBillableTimeSummaryForm operation.
     * @callback module:api/DefaultApi~putBillableTimeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBillableTimeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBillableTimeSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBillableTimeSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBillableTimeSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/billable-time-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBusinessDetailsForm operation.
     * @callback module:api/DefaultApi~putBusinessDetailsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putBusinessDetailsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBusinessDetailsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putBusinessDetailsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putBusinessDetailsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/business-details-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCapitalAccountForm operation.
     * @callback module:api/DefaultApi~putCapitalAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCapitalAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCapitalAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCapitalAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCapitalAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCapitalAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putCapitalAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCapitalAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCapitalAccountStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCapitalAccountStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCapitalAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-account-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCapitalAccountsSummaryForm operation.
     * @callback module:api/DefaultApi~putCapitalAccountsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCapitalAccountsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCapitalAccountsSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCapitalAccountsSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCapitalAccountsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-accounts-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCapitalSubaccountForm operation.
     * @callback module:api/DefaultApi~putCapitalSubaccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCapitalSubaccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCapitalSubaccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCapitalSubaccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCapitalSubaccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/capital-subaccount-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCashFlowStatementFinancingActivityGroupForm operation.
     * @callback module:api/DefaultApi~putCashFlowStatementFinancingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCashFlowStatementFinancingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCashFlowStatementFinancingActivityGroupForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCashFlowStatementFinancingActivityGroupForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCashFlowStatementFinancingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-financing-activity-group-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCashFlowStatementForm operation.
     * @callback module:api/DefaultApi~putCashFlowStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCashFlowStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCashFlowStatementForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCashFlowStatementForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCashFlowStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCashFlowStatementInvestingActivityGroupForm operation.
     * @callback module:api/DefaultApi~putCashFlowStatementInvestingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCashFlowStatementInvestingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCashFlowStatementInvestingActivityGroupForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCashFlowStatementInvestingActivityGroupForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCashFlowStatementInvestingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-investing-activity-group-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCashFlowStatementOperatingActivityGroupForm operation.
     * @callback module:api/DefaultApi~putCashFlowStatementOperatingActivityGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCashFlowStatementOperatingActivityGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCashFlowStatementOperatingActivityGroupForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCashFlowStatementOperatingActivityGroupForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCashFlowStatementOperatingActivityGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cash-flow-statement-operating-activity-group-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCheckboxCustomFieldForm operation.
     * @callback module:api/DefaultApi~putCheckboxCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCheckboxCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCheckboxCustomFieldForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCheckboxCustomFieldForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCheckboxCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checkbox-custom-field-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putClassicCustomFieldForm operation.
     * @callback module:api/DefaultApi~putClassicCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putClassicCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putClassicCustomFieldForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putClassicCustomFieldForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putClassicCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/classic-custom-field-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForBankAccountsForm operation.
     * @callback module:api/DefaultApi~putControlAccountForBankAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForBankAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForBankAccountsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForBankAccountsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForBankAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-bank-accounts-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForCapitalAccountsForm operation.
     * @callback module:api/DefaultApi~putControlAccountForCapitalAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForCapitalAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForCapitalAccountsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForCapitalAccountsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForCapitalAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-capital-accounts-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForCustomersForm operation.
     * @callback module:api/DefaultApi~putControlAccountForCustomersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForCustomersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForCustomersForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForCustomersForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForCustomersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-customers-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForEmployeesForm operation.
     * @callback module:api/DefaultApi~putControlAccountForEmployeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForEmployeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForEmployeesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForEmployeesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForEmployeesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-employees-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForFixedAssetsAccumulatedDepreciationForm operation.
     * @callback module:api/DefaultApi~putControlAccountForFixedAssetsAccumulatedDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForFixedAssetsAccumulatedDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForFixedAssetsAccumulatedDepreciationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForFixedAssetsAccumulatedDepreciationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForFixedAssetsAccumulatedDepreciationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-accumulated-depreciation-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForFixedAssetsForm operation.
     * @callback module:api/DefaultApi~putControlAccountForFixedAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForFixedAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForFixedAssetsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForFixedAssetsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForFixedAssetsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-fixed-assets-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForIntangibleAssetsAccumulatedAmortizationForm operation.
     * @callback module:api/DefaultApi~putControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForIntangibleAssetsAccumulatedAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForIntangibleAssetsAccumulatedAmortizationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForIntangibleAssetsAccumulatedAmortizationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForIntangibleAssetsAccumulatedAmortizationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-accumulated-amortization-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForIntangibleAssetsForm operation.
     * @callback module:api/DefaultApi~putControlAccountForIntangibleAssetsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForIntangibleAssetsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForIntangibleAssetsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForIntangibleAssetsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForIntangibleAssetsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-intangible-assets-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForInventoryItemsForm operation.
     * @callback module:api/DefaultApi~putControlAccountForInventoryItemsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForInventoryItemsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForInventoryItemsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForInventoryItemsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForInventoryItemsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-inventory-items-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForInvestmentsForm operation.
     * @callback module:api/DefaultApi~putControlAccountForInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForInvestmentsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForInvestmentsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForInvestmentsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-investments-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForSpecialAccountsForm operation.
     * @callback module:api/DefaultApi~putControlAccountForSpecialAccountsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForSpecialAccountsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForSpecialAccountsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForSpecialAccountsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForSpecialAccountsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-special-accounts-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putControlAccountForSuppliersForm operation.
     * @callback module:api/DefaultApi~putControlAccountForSuppliersFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putControlAccountForSuppliersFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putControlAccountForSuppliersForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putControlAccountForSuppliersForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putControlAccountForSuppliersForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/control-account-for-suppliers-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCreditNoteFooterForm operation.
     * @callback module:api/DefaultApi~putCreditNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCreditNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCreditNoteFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCreditNoteFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCreditNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCreditNoteForm operation.
     * @callback module:api/DefaultApi~putCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCreditNoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCreditNoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCreditNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/credit-note-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCustomReportForm operation.
     * @callback module:api/DefaultApi~putCustomReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCustomReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCustomReportForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCustomReportForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom-report-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCustomerForm operation.
     * @callback module:api/DefaultApi~putCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCustomerForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCustomerForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCustomerPortalForm operation.
     * @callback module:api/DefaultApi~putCustomerPortalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCustomerPortalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCustomerPortalForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCustomerPortalForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomerPortalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-portal-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCustomerStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~putCustomerStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCustomerStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCustomerStatementsTransactionsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCustomerStatementsTransactionsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomerStatementsTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-transactions-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCustomerStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~putCustomerStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCustomerStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCustomerStatementsUnpaidInvoicesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCustomerStatementsUnpaidInvoicesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomerStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-statements-unpaid-invoices-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCustomerSummaryForm operation.
     * @callback module:api/DefaultApi~putCustomerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putCustomerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putCustomerSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putCustomerSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomerSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDateAndNumberFormatForm operation.
     * @callback module:api/DefaultApi~putDateAndNumberFormatFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDateAndNumberFormatFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDateAndNumberFormatForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDateAndNumberFormatForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDateAndNumberFormatForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-and-number-format-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDateCustomFieldForm operation.
     * @callback module:api/DefaultApi~putDateCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDateCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDateCustomFieldForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDateCustomFieldForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDateCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/date-custom-field-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDebitNoteFooterForm operation.
     * @callback module:api/DefaultApi~putDebitNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDebitNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDebitNoteFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDebitNoteFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDebitNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDebitNoteForm operation.
     * @callback module:api/DefaultApi~putDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDebitNoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDebitNoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDebitNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/debit-note-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDeliveryNoteFooterForm operation.
     * @callback module:api/DefaultApi~putDeliveryNoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDeliveryNoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDeliveryNoteFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDeliveryNoteFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDeliveryNoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~putDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDeliveryNoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDeliveryNoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDeliveryNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delivery-note-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDepreciationCalculationWorksheetForm operation.
     * @callback module:api/DefaultApi~putDepreciationCalculationWorksheetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDepreciationCalculationWorksheetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDepreciationCalculationWorksheetForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDepreciationCalculationWorksheetForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDepreciationCalculationWorksheetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-calculation-worksheet-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDepreciationEntryForm operation.
     * @callback module:api/DefaultApi~putDepreciationEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDepreciationEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDepreciationEntryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDepreciationEntryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDepreciationEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/depreciation-entry-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDivisionExceptionReportForm operation.
     * @callback module:api/DefaultApi~putDivisionExceptionReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDivisionExceptionReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDivisionExceptionReportForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDivisionExceptionReportForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDivisionExceptionReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-exception-report-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDivisionForm operation.
     * @callback module:api/DefaultApi~putDivisionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putDivisionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDivisionForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putDivisionForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDivisionForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/division-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailSettingsForm operation.
     * @callback module:api/DefaultApi~putEmailSettingsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailSettingsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailSettingsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailSettingsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailSettingsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-settings-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForCreditNoteForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForCreditNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForCreditNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForCreditNoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForCreditNoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForCreditNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-credit-note-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForCustomerStatementForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForCustomerStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForCustomerStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForCustomerStatementForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForCustomerStatementForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForCustomerStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-customer-statement-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForDebitNoteForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForDebitNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForDebitNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForDebitNoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForDebitNoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForDebitNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-debit-note-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForDeliveryNoteForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForDeliveryNoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForDeliveryNoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForDeliveryNoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForDeliveryNoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForDeliveryNoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-delivery-note-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForPaymentForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForPaymentForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForPaymentForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payment-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForPayslipForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForPayslipForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForPayslipForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-payslip-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForPurchaseInvoiceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForPurchaseInvoiceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-invoice-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForPurchaseOrderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForPurchaseOrderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-order-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForPurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForPurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForPurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForPurchaseQuoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForPurchaseQuoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForPurchaseQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-purchase-quote-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForReceiptForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForReceiptForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForReceiptForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-receipt-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForSalesInvoiceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForSalesInvoiceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-invoice-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForSalesOrderForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForSalesOrderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForSalesOrderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-order-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailTemplateForSalesQuoteForm operation.
     * @callback module:api/DefaultApi~putEmailTemplateForSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmailTemplateForSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmailTemplateForSalesQuoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmailTemplateForSalesQuoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmailTemplateForSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/email-template-for-sales-quote-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmployeeForm operation.
     * @callback module:api/DefaultApi~putEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmployeeForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmployeeForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmployeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmployeeStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putEmployeeStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmployeeStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmployeeStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmployeeStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmployeeStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmployeeSummaryForm operation.
     * @callback module:api/DefaultApi~putEmployeeSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putEmployeeSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putEmployeeSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putEmployeeSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putEmployeeSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employee-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putExchangeRateForm operation.
     * @callback module:api/DefaultApi~putExchangeRateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putExchangeRateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putExchangeRateForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putExchangeRateForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExchangeRateForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/exchange-rate-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putExpenseClaimFooterForm operation.
     * @callback module:api/DefaultApi~putExpenseClaimFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putExpenseClaimFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putExpenseClaimFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putExpenseClaimFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExpenseClaimFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putExpenseClaimForm operation.
     * @callback module:api/DefaultApi~putExpenseClaimFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putExpenseClaimFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putExpenseClaimForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putExpenseClaimForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExpenseClaimForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putExpenseClaimPayerForm operation.
     * @callback module:api/DefaultApi~putExpenseClaimPayerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putExpenseClaimPayerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putExpenseClaimPayerForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putExpenseClaimPayerForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExpenseClaimPayerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claim-payer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putExpenseClaimsSummaryForm operation.
     * @callback module:api/DefaultApi~putExpenseClaimsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putExpenseClaimsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putExpenseClaimsSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putExpenseClaimsSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExpenseClaimsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/expense-claims-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putExtensionForm operation.
     * @callback module:api/DefaultApi~putExtensionFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putExtensionFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putExtensionForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putExtensionForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExtensionForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extension-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFixedAssetForm operation.
     * @callback module:api/DefaultApi~putFixedAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putFixedAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putFixedAssetForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putFixedAssetForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putFixedAssetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFixedAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putFixedAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putFixedAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putFixedAssetStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putFixedAssetStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putFixedAssetStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFixedAssetSummaryForm operation.
     * @callback module:api/DefaultApi~putFixedAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putFixedAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putFixedAssetSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putFixedAssetSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putFixedAssetSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fixed-asset-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFolderForm operation.
     * @callback module:api/DefaultApi~putFolderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putFolderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putFolderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putFolderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putFolderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/folder-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putForecastForm operation.
     * @callback module:api/DefaultApi~putForecastFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putForecastFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putForecastForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putForecastForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putForecastForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putForecastProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~putForecastProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putForecastProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putForecastProfitAndLossStatementForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putForecastProfitAndLossStatementForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putForecastProfitAndLossStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast-profit-and-loss-statement-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putForeignCurrencyForm operation.
     * @callback module:api/DefaultApi~putForeignCurrencyFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putForeignCurrencyFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putForeignCurrencyForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putForeignCurrencyForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putForeignCurrencyForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/foreign-currency-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putGeneralLedgerSummaryForm operation.
     * @callback module:api/DefaultApi~putGeneralLedgerSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putGeneralLedgerSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putGeneralLedgerSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putGeneralLedgerSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putGeneralLedgerSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putGeneralLedgerTransactionsForm operation.
     * @callback module:api/DefaultApi~putGeneralLedgerTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putGeneralLedgerTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putGeneralLedgerTransactionsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putGeneralLedgerTransactionsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putGeneralLedgerTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/general-ledger-transactions-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putGoodsReceiptFooterForm operation.
     * @callback module:api/DefaultApi~putGoodsReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putGoodsReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putGoodsReceiptFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putGoodsReceiptFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putGoodsReceiptFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putGoodsReceiptForm operation.
     * @callback module:api/DefaultApi~putGoodsReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putGoodsReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putGoodsReceiptForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putGoodsReceiptForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putGoodsReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/goods-receipt-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putIntangibleAssetForm operation.
     * @callback module:api/DefaultApi~putIntangibleAssetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putIntangibleAssetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putIntangibleAssetForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putIntangibleAssetForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putIntangibleAssetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putIntangibleAssetStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putIntangibleAssetStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putIntangibleAssetStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putIntangibleAssetStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putIntangibleAssetStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putIntangibleAssetStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putIntangibleAssetSummaryForm operation.
     * @callback module:api/DefaultApi~putIntangibleAssetSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putIntangibleAssetSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putIntangibleAssetSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putIntangibleAssetSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putIntangibleAssetSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intangible-asset-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInterAccountTransferFooterForm operation.
     * @callback module:api/DefaultApi~putInterAccountTransferFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInterAccountTransferFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInterAccountTransferFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInterAccountTransferFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInterAccountTransferFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~putInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInterAccountTransferForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInterAccountTransferForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInterAccountTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inter-account-transfer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInternalPdfGeneratorForm operation.
     * @callback module:api/DefaultApi~putInternalPdfGeneratorFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInternalPdfGeneratorFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInternalPdfGeneratorForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInternalPdfGeneratorForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInternalPdfGeneratorForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/internal-pdf-generator-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventmentForm operation.
     * @callback module:api/DefaultApi~putInventmentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventmentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventmentForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventmentForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventmentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventment-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryAutomaticRevaluationForm operation.
     * @callback module:api/DefaultApi~putInventoryAutomaticRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryAutomaticRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryAutomaticRevaluationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryAutomaticRevaluationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryAutomaticRevaluationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-automatic-revaluation-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryItemForm operation.
     * @callback module:api/DefaultApi~putInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryItemForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryItemForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryItemStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putInventoryItemStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryItemStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryItemStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryItemStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryItemStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-item-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryKitForm operation.
     * @callback module:api/DefaultApi~putInventoryKitFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryKitFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryKitForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryKitForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryKitForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-kit-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryLocationForm operation.
     * @callback module:api/DefaultApi~putInventoryLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryLocationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryLocationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryLocationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-location-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryPriceListForm operation.
     * @callback module:api/DefaultApi~putInventoryPriceListFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryPriceListFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryPriceListForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryPriceListForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryPriceListForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-price-list-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryProfitMarginForm operation.
     * @callback module:api/DefaultApi~putInventoryProfitMarginFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryProfitMarginFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryProfitMarginForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryProfitMarginForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryProfitMarginForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-profit-margin-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryQuantityByLocationForm operation.
     * @callback module:api/DefaultApi~putInventoryQuantityByLocationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryQuantityByLocationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryQuantityByLocationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryQuantityByLocationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryQuantityByLocationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-by-location-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryQuantitySummaryForm operation.
     * @callback module:api/DefaultApi~putInventoryQuantitySummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryQuantitySummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryQuantitySummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryQuantitySummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryQuantitySummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-quantity-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryRevaluationForm operation.
     * @callback module:api/DefaultApi~putInventoryRevaluationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryRevaluationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryRevaluationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryRevaluationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryRevaluationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-revaluation-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryTransferForm operation.
     * @callback module:api/DefaultApi~putInventoryTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryTransferForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryTransferForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-transfer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryValueSummaryForm operation.
     * @callback module:api/DefaultApi~putInventoryValueSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryValueSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryValueSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryValueSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryValueSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-value-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInventoryWriteOffForm operation.
     * @callback module:api/DefaultApi~putInventoryWriteOffFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInventoryWriteOffFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInventoryWriteOffForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInventoryWriteOffForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInventoryWriteOffForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory-write-off-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInvestmentMarketPriceForm operation.
     * @callback module:api/DefaultApi~putInvestmentMarketPriceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInvestmentMarketPriceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInvestmentMarketPriceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInvestmentMarketPriceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInvestmentMarketPriceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-market-price-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInvestmentStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putInvestmentStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putInvestmentStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putInvestmentStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putInvestmentStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putInvestmentStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/investment-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putJournalEntryFooterForm operation.
     * @callback module:api/DefaultApi~putJournalEntryFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putJournalEntryFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putJournalEntryFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putJournalEntryFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putJournalEntryFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putJournalEntryForm operation.
     * @callback module:api/DefaultApi~putJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putJournalEntryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putJournalEntryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putJournalEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal-entry-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putLatePaymentFeeForm operation.
     * @callback module:api/DefaultApi~putLatePaymentFeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putLatePaymentFeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putLatePaymentFeeForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putLatePaymentFeeForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putLatePaymentFeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/late-payment-fee-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putLockDateForm operation.
     * @callback module:api/DefaultApi~putLockDateFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putLockDateFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putLockDateForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putLockDateForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putLockDateForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lock-date-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMultipleValueCustomFieldForm operation.
     * @callback module:api/DefaultApi~putMultipleValueCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putMultipleValueCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putMultipleValueCustomFieldForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putMultipleValueCustomFieldForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putMultipleValueCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/multiple-value-custom-field-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putNonInventoryItemForm operation.
     * @callback module:api/DefaultApi~putNonInventoryItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putNonInventoryItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putNonInventoryItemForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putNonInventoryItemForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putNonInventoryItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/non-inventory-item-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putNumberCustomFieldForm operation.
     * @callback module:api/DefaultApi~putNumberCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putNumberCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putNumberCustomFieldForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putNumberCustomFieldForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putNumberCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/number-custom-field-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPaymentFooterForm operation.
     * @callback module:api/DefaultApi~putPaymentFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPaymentFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPaymentFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPaymentFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPaymentFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPaymentForm operation.
     * @callback module:api/DefaultApi~putPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPaymentForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPaymentForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPaymentRuleForm operation.
     * @callback module:api/DefaultApi~putPaymentRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPaymentRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPaymentRuleForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPaymentRuleForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPaymentRuleForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-rule-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipContributionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~putPayslipContributionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipContributionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipContributionItemReportingCategoryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipContributionItemReportingCategoryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipContributionItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-contribution-item-reporting-category-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipDeductionItemForm operation.
     * @callback module:api/DefaultApi~putPayslipDeductionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipDeductionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipDeductionItemForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipDeductionItemForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipDeductionItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipDeductionItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~putPayslipDeductionItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipDeductionItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipDeductionItemReportingCategoryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipDeductionItemReportingCategoryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipDeductionItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-deduction-item-reporting-category-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipEarningsItemForm operation.
     * @callback module:api/DefaultApi~putPayslipEarningsItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipEarningsItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipEarningsItemForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipEarningsItemForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipEarningsItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipEarningsItemReportingCategoryForm operation.
     * @callback module:api/DefaultApi~putPayslipEarningsItemReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipEarningsItemReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipEarningsItemReportingCategoryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipEarningsItemReportingCategoryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipEarningsItemReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-earnings-item-reporting-category-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipEmployerContributionItemForm operation.
     * @callback module:api/DefaultApi~putPayslipEmployerContributionItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipEmployerContributionItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipEmployerContributionItemForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipEmployerContributionItemForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipEmployerContributionItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-employer-contribution-item-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipFooterForm operation.
     * @callback module:api/DefaultApi~putPayslipFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipForm operation.
     * @callback module:api/DefaultApi~putPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipSummaryForm operation.
     * @callback module:api/DefaultApi~putPayslipSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPayslipTotalsPerItemAndEmployeeForm operation.
     * @callback module:api/DefaultApi~putPayslipTotalsPerItemAndEmployeeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPayslipTotalsPerItemAndEmployeeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPayslipTotalsPerItemAndEmployeeForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPayslipTotalsPerItemAndEmployeeForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPayslipTotalsPerItemAndEmployeeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payslip-totals-per-item-and-employee-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProductionOrderForm operation.
     * @callback module:api/DefaultApi~putProductionOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProductionOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProductionOrderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProductionOrderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProductionOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/production-order-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountBillableExpensesCostForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountBillableExpensesCostFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountBillableExpensesCostFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountBillableExpensesCostForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountBillableExpensesCostForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountBillableExpensesCostForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-cost-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountBillableExpensesInvoicedForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountBillableExpensesInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountBillableExpensesInvoicedForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountBillableExpensesInvoicedForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountBillableExpensesInvoicedForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-expenses-invoiced-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountBillableTimeInvoicedForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountBillableTimeInvoicedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountBillableTimeInvoicedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountBillableTimeInvoicedForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountBillableTimeInvoicedForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountBillableTimeInvoicedForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-invoiced-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountBillableTimeMovementForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountBillableTimeMovementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountBillableTimeMovementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountBillableTimeMovementForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountBillableTimeMovementForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountBillableTimeMovementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-billable-time-movement-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountCapitalGainsOnInvestmentsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountCapitalGainsOnInvestmentsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-capital-gains-on-investments-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountCurrencyGainsLossesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountCurrencyGainsLossesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountCurrencyGainsLossesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-currency-gains-losses-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountFixedAssetDepreciationForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountFixedAssetDepreciationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountFixedAssetDepreciationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountFixedAssetDepreciationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountFixedAssetDepreciationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountFixedAssetDepreciationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-depreciation-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountFixedAssetLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountFixedAssetLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountFixedAssetLossOnDisposalForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountFixedAssetLossOnDisposalForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountFixedAssetLossOnDisposalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-fixed-asset-loss-on-disposal-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountIntangibleAssetsAmortizationForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountIntangibleAssetsAmortizationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountIntangibleAssetsAmortizationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountIntangibleAssetsAmortizationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountIntangibleAssetsAmortizationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-amortization-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountIntangibleAssetsGainsLossOnDisposalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-intangible-assets-gains-loss-on-disposal-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountInventoryPurchasesForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountInventoryPurchasesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountInventoryPurchasesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountInventoryPurchasesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountInventoryPurchasesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountInventoryPurchasesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-purchases-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountInventorySalesForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountInventorySalesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountInventorySalesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountInventorySalesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountInventorySalesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountInventorySalesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-inventory-sales-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountLatePaymentFeesForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountLatePaymentFeesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountLatePaymentFeesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountLatePaymentFeesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountLatePaymentFeesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountLatePaymentFeesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-late-payment-fees-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementAccountRoundingExpenseForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementAccountRoundingExpenseFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementAccountRoundingExpenseFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementAccountRoundingExpenseForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementAccountRoundingExpenseForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementAccountRoundingExpenseForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-account-rounding-expense-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementActualVsBudgetForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementActualVsBudgetFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementActualVsBudgetFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementActualVsBudgetForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementActualVsBudgetForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementActualVsBudgetForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-actual-vs-budget-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementGroupForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementGroupFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementGroupFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementGroupForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementGroupForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementGroupForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-group-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementSubtotalForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementSubtotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementSubtotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementSubtotalForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementSubtotalForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementSubtotalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-subtotal-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfitAndLossStatementTotalForm operation.
     * @callback module:api/DefaultApi~putProfitAndLossStatementTotalFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProfitAndLossStatementTotalFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProfitAndLossStatementTotalForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProfitAndLossStatementTotalForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProfitAndLossStatementTotalForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/profit-and-loss-statement-total-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProjectForm operation.
     * @callback module:api/DefaultApi~putProjectFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putProjectFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProjectForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putProjectForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putProjectForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPurchaseInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~putPurchaseInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPurchaseInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPurchaseInvoiceFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPurchaseInvoiceFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPurchaseInvoiceFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~putPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPurchaseInvoiceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPurchaseInvoiceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPurchaseInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putPurchaseInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPurchaseInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPurchaseInvoiceStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPurchaseInvoiceStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPurchaseInvoiceStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-invoice-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPurchaseOrderFooterForm operation.
     * @callback module:api/DefaultApi~putPurchaseOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPurchaseOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPurchaseOrderFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPurchaseOrderFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPurchaseOrderFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~putPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPurchaseOrderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPurchaseOrderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-order-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPurchaseQuoteFooterForm operation.
     * @callback module:api/DefaultApi~putPurchaseQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPurchaseQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPurchaseQuoteFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPurchaseQuoteFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPurchaseQuoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPurchaseQuoteForm operation.
     * @callback module:api/DefaultApi~putPurchaseQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putPurchaseQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPurchaseQuoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putPurchaseQuoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPurchaseQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/purchase-quote-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRealizedCurrencyGainsLossesForm operation.
     * @callback module:api/DefaultApi~putRealizedCurrencyGainsLossesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRealizedCurrencyGainsLossesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRealizedCurrencyGainsLossesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRealizedCurrencyGainsLossesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRealizedCurrencyGainsLossesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-currency-gains-losses-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRealizedInvestmentGainsSummaryForm operation.
     * @callback module:api/DefaultApi~putRealizedInvestmentGainsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRealizedInvestmentGainsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRealizedInvestmentGainsSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRealizedInvestmentGainsSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRealizedInvestmentGainsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/realized-investment-gains-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReceiptFooterForm operation.
     * @callback module:api/DefaultApi~putReceiptFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putReceiptFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putReceiptFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putReceiptFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putReceiptFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReceiptForm operation.
     * @callback module:api/DefaultApi~putReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putReceiptForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putReceiptForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReceiptRuleForm operation.
     * @callback module:api/DefaultApi~putReceiptRuleFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putReceiptRuleFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putReceiptRuleForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putReceiptRuleForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putReceiptRuleForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipt-rule-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReceiptsAndPaymentsSummaryForm operation.
     * @callback module:api/DefaultApi~putReceiptsAndPaymentsSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putReceiptsAndPaymentsSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putReceiptsAndPaymentsSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putReceiptsAndPaymentsSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putReceiptsAndPaymentsSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/receipts-and-payments-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringInterAccountTransferForm operation.
     * @callback module:api/DefaultApi~putRecurringInterAccountTransferFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringInterAccountTransferFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringInterAccountTransferForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringInterAccountTransferForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringInterAccountTransferForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-inter-account-transfer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringJournalEntryForm operation.
     * @callback module:api/DefaultApi~putRecurringJournalEntryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringJournalEntryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringJournalEntryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringJournalEntryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringJournalEntryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-journal-entry-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringPaymentForm operation.
     * @callback module:api/DefaultApi~putRecurringPaymentFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringPaymentFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringPaymentForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringPaymentForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringPaymentForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payment-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringPayslipForm operation.
     * @callback module:api/DefaultApi~putRecurringPayslipFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringPayslipFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringPayslipForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringPayslipForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringPayslipForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-payslip-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringPurchaseInvoiceForm operation.
     * @callback module:api/DefaultApi~putRecurringPurchaseInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringPurchaseInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringPurchaseInvoiceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringPurchaseInvoiceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringPurchaseInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-invoice-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringPurchaseOrderForm operation.
     * @callback module:api/DefaultApi~putRecurringPurchaseOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringPurchaseOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringPurchaseOrderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringPurchaseOrderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringPurchaseOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-purchase-order-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringReceiptForm operation.
     * @callback module:api/DefaultApi~putRecurringReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringReceiptForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringReceiptForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-receipt-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~putRecurringSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringSalesInvoiceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringSalesInvoiceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-invoice-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringSalesOrderForm operation.
     * @callback module:api/DefaultApi~putRecurringSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringSalesOrderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringSalesOrderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-order-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecurringSalesQuoteForm operation.
     * @callback module:api/DefaultApi~putRecurringSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putRecurringSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecurringSalesQuoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putRecurringSalesQuoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRecurringSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recurring-sales-quote-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReportTransformationForm operation.
     * @callback module:api/DefaultApi~putReportTransformationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putReportTransformationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putReportTransformationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putReportTransformationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putReportTransformationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReportTransformationLabelForm operation.
     * @callback module:api/DefaultApi~putReportTransformationLabelFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putReportTransformationLabelFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putReportTransformationLabelForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putReportTransformationLabelForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putReportTransformationLabelForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-label-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReportTransformationReportForm operation.
     * @callback module:api/DefaultApi~putReportTransformationReportFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putReportTransformationReportFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putReportTransformationReportForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putReportTransformationReportForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putReportTransformationReportForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report-transformation-report-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesInvoiceFooterForm operation.
     * @callback module:api/DefaultApi~putSalesInvoiceFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesInvoiceFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesInvoiceFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesInvoiceFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesInvoiceFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesInvoiceForm operation.
     * @callback module:api/DefaultApi~putSalesInvoiceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesInvoiceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesInvoiceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesInvoiceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesInvoiceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesInvoiceStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putSalesInvoiceStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesInvoiceStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesInvoiceStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesInvoiceStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesInvoiceStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesInvoiceTotalsByCustomFieldForm operation.
     * @callback module:api/DefaultApi~putSalesInvoiceTotalsByCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesInvoiceTotalsByCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesInvoiceTotalsByCustomFieldForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesInvoiceTotalsByCustomFieldForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesInvoiceTotalsByCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-custom-field-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesInvoiceTotalsByCustomerForm operation.
     * @callback module:api/DefaultApi~putSalesInvoiceTotalsByCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesInvoiceTotalsByCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesInvoiceTotalsByCustomerForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesInvoiceTotalsByCustomerForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesInvoiceTotalsByCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-customer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesInvoiceTotalsByItemForm operation.
     * @callback module:api/DefaultApi~putSalesInvoiceTotalsByItemFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesInvoiceTotalsByItemFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesInvoiceTotalsByItemForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesInvoiceTotalsByItemForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesInvoiceTotalsByItemForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-invoice-totals-by-item-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesOrderFooterForm operation.
     * @callback module:api/DefaultApi~putSalesOrderFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesOrderFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesOrderFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesOrderFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesOrderFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesOrderForm operation.
     * @callback module:api/DefaultApi~putSalesOrderFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesOrderFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesOrderForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesOrderForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesOrderForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-order-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesQuoteFooterForm operation.
     * @callback module:api/DefaultApi~putSalesQuoteFooterFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesQuoteFooterFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesQuoteFooterForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesQuoteFooterForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesQuoteFooterForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-footer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSalesQuoteForm operation.
     * @callback module:api/DefaultApi~putSalesQuoteFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSalesQuoteFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSalesQuoteForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSalesQuoteForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSalesQuoteForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales-quote-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSpecialAccountForm operation.
     * @callback module:api/DefaultApi~putSpecialAccountFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSpecialAccountFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSpecialAccountForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSpecialAccountForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSpecialAccountForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSpecialAccountStartingBalanceForm operation.
     * @callback module:api/DefaultApi~putSpecialAccountStartingBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSpecialAccountStartingBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSpecialAccountStartingBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSpecialAccountStartingBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSpecialAccountStartingBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/special-account-starting-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putStatementOfChangesInEquityForm operation.
     * @callback module:api/DefaultApi~putStatementOfChangesInEquityFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putStatementOfChangesInEquityFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putStatementOfChangesInEquityForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putStatementOfChangesInEquityForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putStatementOfChangesInEquityForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/statement-of-changes-in-equity-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSummaryForm operation.
     * @callback module:api/DefaultApi~putSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSupplierForm operation.
     * @callback module:api/DefaultApi~putSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSupplierForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSupplierForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSupplierForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSupplierStatementsTransactionsForm operation.
     * @callback module:api/DefaultApi~putSupplierStatementsTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSupplierStatementsTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSupplierStatementsTransactionsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSupplierStatementsTransactionsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSupplierStatementsTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-transactions-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSupplierStatementsUnpaidInvoicesForm operation.
     * @callback module:api/DefaultApi~putSupplierStatementsUnpaidInvoicesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSupplierStatementsUnpaidInvoicesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSupplierStatementsUnpaidInvoicesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSupplierStatementsUnpaidInvoicesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSupplierStatementsUnpaidInvoicesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-statements-unpaid-invoices-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSupplierSummaryForm operation.
     * @callback module:api/DefaultApi~putSupplierSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putSupplierSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putSupplierSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putSupplierSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSupplierSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTabsForm operation.
     * @callback module:api/DefaultApi~putTabsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTabsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTabsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTabsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTabsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tabs-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxAmountReportingCategoryForm operation.
     * @callback module:api/DefaultApi~putTaxAmountReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxAmountReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxAmountReportingCategoryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxAmountReportingCategoryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxAmountReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reporting-category-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxAmountReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~putTaxAmountReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxAmountReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxAmountReversedReportingCategoryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxAmountReversedReportingCategoryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxAmountReversedReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-amount-reversed-reporting-category-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxAuditForm operation.
     * @callback module:api/DefaultApi~putTaxAuditFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxAuditFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxAuditForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxAuditForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxAuditForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-audit-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxCodeForm operation.
     * @callback module:api/DefaultApi~putTaxCodeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxCodeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxCodeForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxCodeForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxCodeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxCodeReportingCategoryForm operation.
     * @callback module:api/DefaultApi~putTaxCodeReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxCodeReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxCodeReportingCategoryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxCodeReportingCategoryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxCodeReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reporting-category-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxCodeReversedReportingCategoryForm operation.
     * @callback module:api/DefaultApi~putTaxCodeReversedReportingCategoryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxCodeReversedReportingCategoryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxCodeReversedReportingCategoryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxCodeReversedReportingCategoryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxCodeReversedReportingCategoryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-code-reversed-reporting-category-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxReconciliationForm operation.
     * @callback module:api/DefaultApi~putTaxReconciliationFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxReconciliationFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxReconciliationForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxReconciliationForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxReconciliationForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-reconciliation-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxSummaryForm operation.
     * @callback module:api/DefaultApi~putTaxSummaryFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxSummaryFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxSummaryForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxSummaryForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxSummaryForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-summary-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxTransactionsForm operation.
     * @callback module:api/DefaultApi~putTaxTransactionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxTransactionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxTransactionsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxTransactionsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxTransactionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tax-transactions-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxablePurchasesPerSupplierForm operation.
     * @callback module:api/DefaultApi~putTaxablePurchasesPerSupplierFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxablePurchasesPerSupplierFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxablePurchasesPerSupplierForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxablePurchasesPerSupplierForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxablePurchasesPerSupplierForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-purchases-per-supplier-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTaxableSalesPerCustomerForm operation.
     * @callback module:api/DefaultApi~putTaxableSalesPerCustomerFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTaxableSalesPerCustomerFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaxableSalesPerCustomerForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTaxableSalesPerCustomerForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTaxableSalesPerCustomerForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxable-sales-per-customer-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTextCustomFieldForm operation.
     * @callback module:api/DefaultApi~putTextCustomFieldFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTextCustomFieldFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTextCustomFieldForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTextCustomFieldForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTextCustomFieldForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/text-custom-field-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putThemeForm operation.
     * @callback module:api/DefaultApi~putThemeFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putThemeFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putThemeForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putThemeForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putThemeForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/theme-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTrialBalanceForm operation.
     * @callback module:api/DefaultApi~putTrialBalanceFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putTrialBalanceFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTrialBalanceForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putTrialBalanceForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTrialBalanceForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trial-balance-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putUserPermissionsForm operation.
     * @callback module:api/DefaultApi~putUserPermissionsFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putUserPermissionsFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putUserPermissionsForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putUserPermissionsForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putUserPermissionsForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-permissions-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putWebServiceForExchangeRatesForm operation.
     * @callback module:api/DefaultApi~putWebServiceForExchangeRatesFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putWebServiceForExchangeRatesFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putWebServiceForExchangeRatesForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putWebServiceForExchangeRatesForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putWebServiceForExchangeRatesForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/web-service-for-exchange-rates-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putWithholdingTaxForm operation.
     * @callback module:api/DefaultApi~putWithholdingTaxFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putWithholdingTaxFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putWithholdingTaxForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putWithholdingTaxForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putWithholdingTaxForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putWithholdingTaxReceiptForm operation.
     * @callback module:api/DefaultApi~putWithholdingTaxReceiptFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a resource by Key
     * @param {String} key 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~putWithholdingTaxReceiptFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putWithholdingTaxReceiptForm(key, body, callback) {
      let postBody = body;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putWithholdingTaxReceiptForm");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putWithholdingTaxReceiptForm");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/withholding-tax-receipt-form/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
